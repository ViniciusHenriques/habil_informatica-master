{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;

  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  DSCIDADE_NOTA: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_LOTE = 'EnviarLoteRpsEnvio';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
  end;

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      if EnvioSincrono then
        DSCIDADE_NOTA := 'GerarNfseEnvio'
      else
        DSCIDADE_NOTA := 'Rps';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS
        VerificaSeEhNumero('NumeroRps', CampoTecno('NumeroRps'));
        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := Format3('RPS_%s_%s_%s', CampoTecno('NumeroRps'),
            CampoTecno('SerieRps'), CampoTecno('TipoRps'));
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15);
        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);
        
        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Valor inválido para o campo DataEmissao, Exemplo: 2018-01-01');

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);

        if EnvioSincrono then
          SetarCampo('NumeroNfseSubstituida');

        //Competencia
        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao')
        else
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('Competencia');
          end;
        end;
        if _ValorCampo <> '' then
          SetarCampoValor('Competencia', _ValorCampo);

        //Dados Servico
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', True);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('ValorIss', False);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
         _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.', []);
         FormataFloat(StrToFloat(_ValorCampo), 6, 4);
         SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('AliquotaISS');


        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não',
          'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;
        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}
        SetarCampo('ResponsavelRetencao');

        _ValorCampo := CampoTecno('CodigoItemListaServico');

        // Com ponto no ItemListaServico
        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(_ValorCampo, True);
        SetarCampoObrigatorioValorTamanho('ItemListaServico', 'CodigoItemListaServico', _ValorCampo, 5);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
        VerificaSeEhNumero('CodigoCnae', _ValorCampo);
        SetarCampoTamanho('CodigoCnae','CodigoCnae', 7);
        
        SetarCampoTamanho('CodigoTributacaoMunicipio','CodigoTributacaoMunicipio', 20);

        // 2000 caracteres
        SetarCampoObrigatorioTamanho('DiscriminacaoServico','Discriminacao', 2000);
        
        _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadePrestacao'));
        VerificaSeEhNumero('CodigoCidadePrestacao', _ValorCampo);
        SetarCampoObrigatorioTamanho('CodigoCidadePrestacao', 'CodigoMunicipio', 7);
                
        _ValorCampo := CampoTecno('CodigoPais');
        case AnsiIndexText(_ValorCampo, ['1058', '01058', 'BRASIL', 'brasil', 'Brasil']) of
          0, 1, 2, 3, 4: SetarCampoValor('CodigoPais', '1058')
        else
          SetarCampoValor('CodigoPais', _ValorCampo);
        end;

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
          SetarCampo('ExigibilidadeIss')
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
          
         _ValorCampo := RemoveMascara(CampoTecno('MunicipioIncidencia'));
        VerificaSeEhNumero('MunicipioIncidencia', _ValorCampo);
        SetarCampoTamanho('MunicipioIncidencia', 'MunicipioIncidencia', 7);  
        
        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', RemoveMascara(CampoTecno('CpfCnpjPrestador')));

        if AnsiMatchText(Params.Values['Cidade'], ['SAOSEBASTIAODOPARAISOMG']) then
        begin
          _ValorCampo := CampoTecno('InscricaoMunicipalPrestador');
          SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', _ValorCampo, 15);
        end
        else
        begin
          _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
          VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
          SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);
        end;


        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoObrigatorioValorTamanho('CpfTomador', 'CpfCnpjTomador', _ValorCampo, 11);
          14: SetarCampoObrigatorioValorTamanho('CnpjTomador', 'CpfCnpjTomador', _ValorCampo, 14);
        else
          RaiseException('Valor inválido para o campo CpfCnpjTomador, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;
        
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);
        
        
        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 115);
        
        
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);
        
        
        _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadeTomador'));
        VerificaSeEhNumero('CodigoCidadeTomador', _ValorCampo);
        SetarCampoTamanho('CodigoCidadeTomador', 'CodigoMunicipioTomador', 7);
        
        SetarCampoTamanho('UfTomador', 'UfTomador', 2);
        
        SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));
        
        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        if length(_ValorCampo) = 8 then
          SetarCampoValorTamanho('CepTomador', _ValorCampo, 8)
        else
          RaiseException('Campo CepTomador obrigatoriamente deve possuir 8 caracteres.');
        
        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        
        
        _ValorCampo := StringReplace(CampoTecno('EmailTomador'),' ','',[rfReplaceAll]);
        SetarCampoValorTamanho('EmailTomador', _ValorCampo, 80);
        

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        VerificaSeEhNumero('CpfCnpjIntermediario', _ValorCampo);
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario'));
        VerificaSeEhNumero('InscricaoMunicipalIntermediario', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', _ValorCampo, 15);
        
        SetarCampoTamanho('RazaoSocialIntermediario', 'RazaoSocialIntermediario', 115);

        //Dados Construção Civil
        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);

        //Regime Especial Tributação
        if not AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['', '0']) then
        begin
          if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6'])) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5, 6.');
        end;

        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional')
          else
            ExceptionValorInvalidoCampo('OptanteSimplesNacional. Valores aceitos: 1, 2.');
        end;

        //IncentivoFiscal
        SetarCampo('IncentivoFiscal');
        
        _ValorCampo := CampoTecno('IncentivoFiscal');
        case _ValorCampo of
          '1', '2': SetarCampo('IncentivoFiscal');
          'sim', 'SIM': SetarCampoValor('IncentivoFiscal', '1');
          'nao', 'não', 'NAO', 'NÃO': SetarCampoValor('IncentivoFiscal', '2');
          else
            ExceptionValorInvalidoCampo('IncentivoFiscal. Valores aceitos: 1, 2, sim, nao.');
        end;

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      if not(EnvioSincrono) then
      begin
        Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
        Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
        _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

        // IdLote é deduzível do NumeroLote
        if CampoTecno('IdLote') <> '' then
          SetarCampo('IdLote')
        else
        begin
          _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
          SetarCampoValor('IdLote', _ValorCampo);
        end;

        // Item do checklist - deduzir campo versão.
        _ValorCampo := CampoTecno('Versao');
        if (_ValorCampo <> '') then
          SetarCampoValor('Versao', _ValorCampo)
        else
          SetarCampoValor('Versao', '2.02');

        _ValorCampo := CampoTecno('NumeroLote');
        VerificaSeEhNumero('NumeroLote', _ValorCampo);
        SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', _ValorCampo, 15);

        //Dedução campo CpfCnpjRemetente
        _ValorCampo := CampoTecno('CpfCnpjRemetente');
        if _ValorCampo = '' then
          _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString;
          
        SetarCpfCnpj('Cpf', 'Cnpj', 'CpfCnpjRemetente', RemoveMascara(_ValorCampo));

        //Dedução campo InscricaoMunicipalRemetente
        _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
        if _ValorCampo = '' then
          _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName(
            'InscricaoMunicipalPrestador').AsString;
        SetarCampoValor('InscricaoMunicipal', RemoveMascara(_ValorCampo));

        //Dedução quantidade
        if CampoTecno('QuantidadeRps') <> '' then
          SetarCampo('QuantidadeRps')
        else
          SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

        Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
      end;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
