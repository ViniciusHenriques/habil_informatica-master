{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _ValorDecimal: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _QtdeRps: Integer;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_LOTE = 'EnviarLoteRpsEnvio';
  DSCIDADE_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\Comuns.txt}

  function SegundaCasaPar(const aValor : String):boolean;
  var
    _SegundaCasa : Integer;
  begin
    Result := False;
    _SegundaCasa := StrToInt(copy(aValor, 2, 1));
    if(_SegundaCasa mod 2 = 0) then
      Result := True;
  end;

  procedure SetarCampoCurrencyIssNetOnline(const aCampo: string; const SetarSeZero: boolean);
  var 
    _Valor: Currency;
    _Vlr: string;
  begin
    _Valor := 0;
    try
      _Valor := AnyCurrencyToCurrency(CampoTecno(aCampo));
      _Vlr := CampoTecno(aCampo);
    except
      RaiseException('Valor inválido para o campo: ' + aCampo);
    end;
    if ((_Valor <> 0) and (_Valor <> 0.00)) or SetarSeZero then
    begin
      _ValorCampo := StringReplace(_Vlr, ',', '.', []);
      if Pos('.', _ValorCampo) > 0 then
      begin
        _ValorDecimal := Copy(_ValorCampo, Pos('.', _ValorCampo) + 1, Length(_ValorCampo));
        if (Length(_ValorDecimal) >= 4) then
        begin
          _ValorDecimal := Copy(_ValorDecimal, 0, 3);
          if (RightStr(_ValorDecimal, 1) >= '5') then
            _ValorCampo := CurrencyToXsdCurrency(_Valor)
          else
            _ValorCampo := Copy(_ValorCampo, 0, Pos('.', _ValorCampo) + 2);
        end
        else if (Length(_ValorDecimal) = 3) then
        begin
          if (RightStr(_ValorDecimal, 1) = '5') and (SegundaCasaPar(_ValorDecimal)) then
            _ValorCampo := Copy(_ValorCampo, 0, Pos('.', _ValorCampo) + 2)
          else if (RightStr(_ValorDecimal, 1) <= '4') then
            _ValorCampo := Copy(_ValorCampo, 0, Pos('.', _ValorCampo) + 2)
         else           
            _ValorCampo := CurrencyToXsdCurrency(_Valor);
        end
        else
          _ValorCampo := CurrencyToXsdCurrency(_Valor);
      end
      else
        _ValorCampo := _ValorCampo + '.00';
      Campo(_DsCidadeAtual, aCampo).AsString := _ValorCampo;
    end;
  end;
  
begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;
        
        VerificaSeEhNumero('NumeroRps', CampoTecno('NumeroRps'));
        SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15);
        
        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);
        _ValorCampo := Params.Values['Cidade'];
        case UpperCase(_ValorCampo) of
          'ANAPOLIS': SetarCampoValor('SerieRps', '8');
          'APARECIDADEGOIANIA': SetarCampoValor('SerieRps', '9');
          'BARCARENAPA': SetarCampoValor('SerieRps', '3');
          'BARRAMANSARJ': SetarCampoValor('SerieRps', '108');
          'BONITOMS': SetarCampoValor('SerieRps', '14');
          'CASCAVEL': SetarCampoValor('SerieRps', '13');
          'CRUZALTARS': SetarCampoValor('SerieRps', '10');
          'CUIABA': SetarCampoValor('SerieRps', '14');
          'DOURADOS': SetarCampoValor('SerieRps', '13');
          'DUQUEDECAXIAS': SetarCampoValor('SerieRps', '1');
          'JACAREISP': SetarCampoValor('SerieRps', '13');
          'ITATIAIARJ': SetarCampoValor('SerieRps', '12');
          'ITAPORAMS': SetarCampoValor('SerieRps', '3');
          'NOVOHAMBURGO': SetarCampoValor('SerieRps', '3');
          'PARANATINGAMT': SetarCampoValor('SerieRps', '8');
          'PRAIAGRANDESP': SetarCampoValor('SerieRps', '16');
          'RIOBRILHANTEMS': SetarCampoValor('SerieRps', '10');
          'SANTAMARIARS': SetarCampoValor('SerieRps', '20');
          'SAOVICENTE': SetarCampoValor('SerieRps', '8');
          'SIDROLANDIAMS': SetarCampoValor('SerieRps', '7');
          'CASIMIRODEABREURJ': SetarCampoValor('SerieRps', '6');
        end;
        
        
        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3  Cupom.');

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8) or (Length(_ValorCampo) = 15)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'YYYY-MM-DD"T"hh:mm:ss');
          SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DDThh:mm:ss');

        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('OptanteSimplesNacional')
        else
          RaiseException('Para essa cidade o campo OptanteSimplesNacional é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');

        _ValorCampo := CampoTecno('IncentivadorCultural');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('IncentivadorCultural')
        else
          RaiseException('Para essa cidade o campo IncentivadorCultural é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');

        _ValorCampo := CampoTecno('SituacaoNota');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampoValor('Status', CampoTecno('SituacaoNota'))
        else
          RaiseException('Para essa cidade o campo SituacaoNota é obrigatorio e deve ser 1 - Normal, ou 2 - Cancelada');

        case StrToIntDef(CampoTecno('TipoTributacao'), -1) of
          1, 3, 4 : SetarCampoValor('NaturezaOperacao', '3');
          2 : SetarCampoValor('NaturezaOperacao', '4');
          5 : RaiseException('Valor inválido para o campo TipoTributacao. Para ABRASF o TipoTributacao não pode ser "5 - Retida". Para isso pode se utilizar "6 - Tributavel dentro do municipio" ou "7 - Tributável fora do município');
          6 : SetarCampoValor('NaturezaOperacao', '1');
          7 : SetarCampoValor('NaturezaOperacao', '2');
        else
          RaiseException('Valor inválido para o campo TipoTributacao. Valores aceitos: 1, 2, 3, 4, 6, 7.');
        end;

        _ValorCampo := CampoTecno('TipoTributacao');
        // NaturezaTributacao: ignorar quando TipoTributacao for diferente de 6 ou 7
        //if _ValorCampo[1] in ['6', '7'] then
        if AnsiMatchText(_ValorCampo, ['6', '7']) then
        begin
          _ValorCampo := CampoTecno('NaturezaTributacao');
          VerificaSeEhNumero('NaturezaTributacao', _ValorCampo);
          case StrToIntDef(CampoTecno('NaturezaTributacao'), -1) of
            1: ;// IGNORADO
            2, 3: SetarCampoValor('NaturezaOperacao', '1');
            4: SetarCampoValor('NaturezaOperacao', '5');
            5: SetarCampoValor('NaturezaOperacao', '6');
          end;
        end;

        case AnsiIndexText(CampoTecno('RegimeEspecialTributacao'), ['', '0', '1', '2', '3', '4']) of
          0, 1: ;// IGNORADO
          2, 3, 4, 5: SetarCampo('RegimeEspecialTributacao');
        else
          RaiseException('Valor inválido para o campo RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4.');
        end;

        VerificaSeEhNumero('NumeroRpsSubstituido', CampoTecno('NumeroRpsSubstituido'));
        SetarCampoValorTamanho('NumeroRpsSubstituido', CampoTecno('NumeroRpsSubstituido'), 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);
        
        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3  Cupom.');

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', True);

        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['', '1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0: // Vazio: deduzir do TipoTributacao
          begin
            if CampoTecno('TipoTributacao') = '5' then
              SetarCampoValor('IssRetido', '1')
            else
              SetarCampoValor('IssRetido', '2');
          end;
          1, 2, 3: SetarCampoValor('IssRetido', '1');
          4, 5, 6, 7: SetarCampoValor('IssRetido', '2');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        if AnsiMatchText(CampoTecno('OptanteSimplesNacional'), [ '1', 'sim', 'true']) then
        begin
          SetarCampoCurrencyIssNetOnline('ValorIss', True);
          SetarCampoCurrency('BaseCalculo', True);
        end
        else
          SetarCampoCurrencyIssNetOnline('ValorIss', True);

        if CampoTecno('ValorIssRetido') <> '' then
          SetarCampoCurrency('ValorIssRetido', False)
        else
        begin
          // Deduzível (se IssRetido=Sim, utiliza ValorIss)
          if AnsiMatchText(CampoTecno('IssRetido'), [ '1', 'sim', 'true']) then
            SetarCampoValor('ValorIssRetido', CampoCidade('ValorIss'));
        end;

        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('BaseCalculo', True);
        SetarCampoCurrency('ValorLiquidoNfse', True);
        SetarCampoCurrency('DescontoIncondicionado', True);
        SetarCampoCurrency('DescontoCondicionado', True);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          SetarCampoValor('Aliquota', StringReplace(CampoTecno('AliquotaISS'), ',', '.', []))
        end
        else if _ValorCampo = '' then
        begin
          RaiseException('Valor inválido para o campo AliquotaISS, o mesmo deve ser informado da seguinte maneira: "5.00" para 5%');
        end;

        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(CampoTecno('CodigoItemListaServico'), False);
        VerificaSeEhNumero('CodigoItemListaServico', _ValorCampo);
        SetarCampoObrigatorioValorTamanho('ItemListaServico', 'CodigoItemListaServico', _ValorCampo, 5);

        VerificaSeEhNumero('CodigoCnae', CampoTecno('CodigoCnae'));
        SetarCampoValorTamanho('CodigoCnae', CampoTecno('CodigoCnae'), 7);
        SetarCampoTamanho('CodigoTributacaoMunicipio','CodigoTributacaoMunicipio', 20);
        
        if trim(CampoTecno('DiscriminacaoServico')) <> '' then
          SetarCampoValor('Discriminacao', CampoTecno('DiscriminacaoServico'))
        else
          RaiseException('Campo DiscriminacaoServico não pode ser vazio');

        // Issnetonline: se código da cidade for 999, manter assim (cidade de testes)
        _ValorCampo := CampoTecno('CodigoCidadePrestacao');
        if _ValorCampo <> '999' then
          _ValorCampo := ConverterCodigoMunicipio(_ValorCampo, True);
        SetarCampoValor('CodigoMunicipio', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        case Length(_ValorCampo) of
          11: SetarCampoValor('CpfPrestador', _ValorCampo);
          14: SetarCampoValor('CnpjPrestador', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjPrestador,  CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;

        //VerificaSeEhNumero('InscricaoMunicipalPrestador', CampoTecno('InscricaoMunicipalPrestador'));
        SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', CampoTecno('InscricaoMunicipalPrestador'), 15); // TODO: ver nº digitos


        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        case Length(_ValorCampo) of
          11: SetarCampoValor('CpfTomador', _ValorCampo);
          14: SetarCampoValor('CnpjTomador', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjTomador');
        end;

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 115);

        //VerificaSeEhNumero('InscricaoMunicipalTomador', CampoTecno('InscricaoMunicipalTomador'));

        if CampoTecno('IssRetido') = '1' then
          SetarCampoValorTamanho('InscricaoMunicipalTomador', CampoTecno('InscricaoMunicipalTomador'), 15)
        else
        begin
        //if CampoTecno('CodigoCidadePrestador') = CampoTecno('CodigoCidadeTomador') then
          SetarCampoValorTamanho('InscricaoMunicipalTomador', CampoTecno('InscricaoMunicipalTomador'), 15)
        end;

        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);

        if ((CampoTecno('PaisTomador') <> '1058') and (CampoTecno('PaisTomador') <> '01058') and (UpperCase(CampoTecno('PaisTomador')) <> 'BRASIL') and (CampoTecno('PaisTomador') <> '')) or (CampoTecno('CodigoCidadeTomador') = '99999') then
        begin
          SetarCampoValor('CodigoMunicipioTomador','99999');
          SetarCampoValor('UfTomador', 'EX');
        end
        else
        begin
          VerificaSeEhNumero('CodigoCidadeTomador', CampoTecno('CodigoCidadeTomador'));
          SetarCampoTamanho('CodigoCidadeTomador', 'CodigoMunicipioTomador', 7);
          SetarCampoTamanho('UfTomador', 'UfTomador', 2);
        end;

        VerificaSeEhNumero('CepTomador', CampoTecno('CepTomador'));
        SetarCampoValorTamanho('CepTomador', CampoTecno('CepTomador'), 8);
        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoTamanho('EmailTomador', 'EmailTomador', 80);

        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 115);
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario,  CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;

        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', CampoTecno('InscricaoMunicipalIntermediario'), 15); // TODO: ver nº digitos

        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);

        _DsCidadeAtual.Post;

        _DsTecnoAtual.Next;
      end;

          SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // Para Issnetonline não vai IdLote

      VerificaSeEhNumero('NumeroLote', CampoTecno('NumeroLote'));
      SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', CampoTecno('NumeroLote'), 15);

      _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjRemetente'));
      case Length(_ValorCampo) of
        11: SetarCampoValor('Cpf', _ValorCampo);
        14: SetarCampoValor('Cnpj', _ValorCampo);
        0 : // Deduzir do CpfPrestador/CnpjPrestador
        begin
          SetarCampoValor('Cpf', RemoveMascara(Datasets.GetDataSetByName(DSCIDADE_NOTA).FieldByName('CpfPrestador').AsString));
          SetarCampoValor('Cnpj', RemoveMascara(Datasets.GetDataSetByName(DSCIDADE_NOTA).FieldByName('CnpjPrestador').AsString));
        end;
      else
        RaiseException('Valor inválido para o campo CpfCnpjRemetente');
      end;

      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente'); 
      //VerificaSeEhNumero('InscricaoMunicipalRemetente', _ValorCampo);
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
        SetarCampoValorTamanho('InscricaoMunicipal', _ValorCampo, 15);

      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.