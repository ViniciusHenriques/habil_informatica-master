{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;
  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  DSCIDADE_NOTA, DSCIDADE_LOTE: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\Utils.TXT}

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

  function EnvioSincrono: Boolean;
  begin
    Result := SameText(Params.Values['EnvioSincrono'], 'true');
  end;
  
  function RemoveMascaraTelefone(const aCampo: string): String;
  begin
    Result := StringReplace(aCampo, '-', '', [rfReplaceAll, rfIgnoreCase]);
    Result := StringReplace(Result, '(', '', [rfReplaceAll, rfIgnoreCase]);
    Result := StringReplace(Result, ')', '', [rfReplaceAll, rfIgnoreCase]);
    Result := StringReplace(Result, ' ', '', [rfReplaceAll, rfIgnoreCase]);
  end;

begin
  Progress('Criando XSDDataset');
  if not EnvioSincrono then
    RaiseException('Geração de Xml Assíncrono não suportado pelo padrão Sistemas4R.');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      DSCIDADE_NOTA := 'Rps';

      DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS
        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := Format3('RPS_%s_%s_%s', CampoTecno('NumeroRps'),
            CampoTecno('SerieRps'), CampoTecno('TipoRps'));
          SetarCampoValor('IdRps', _ValorCampo);
        end;
        
        _ValorCampo := RemoverZerosEsquerda(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioValorTamanho('NumeroRps', 'NumeroRps', _ValorCampo, 15);

        SetarCampoObrigatorioTamanho('SerieRps', 'SerieRps', 5);

        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DD');


        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);

        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        //Competencia
        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao')
        else
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('Competencia');
          end;
        end;
        if _ValorCampo <> '' then
          SetarCampoValor('Competencia', _ValorCampo);

        //Dados Servico
        SetarCampoValor('ValorServicos', CampoTecno('ValorLiquidoNfse'))
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', True);
        SetarCampoCurrency('ValorPis', True);
        SetarCampoCurrency('ValorCofins', True);
        SetarCampoCurrency('ValorInss', True);
        SetarCampoCurrency('ValorIr', True);
        SetarCampoCurrency('ValorCsll', True);
        SetarCampoCurrency('OutrasRetencoes', True);
        SetarCampoCurrency('ValorIss', True);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.',[]);
          FormataFloat(StrToFloat(_ValorCampo), 6, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('AliquotaISS');

        SetarCampoCurrency('DescontoIncondicionado', true);
        SetarCampoCurrency('DescontoCondicionado', true);
        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não',
          'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;
        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}
        SetarCampoValorTamanho('ResponsavelRetencao', CampoTecno('ResponsavelRetencao'), 1);

        // Abrasf 2.1 (ex: Vitória): com ponto no ItemListaServicotranse psicodelico
        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);
        SetarCampoValorTamanhoObrigatorio('ItemListaServico', _ValorCampo, 5);

        SetarCampoValorTamanho('CodigoCnae', CampoTecno('CodigoCnae'), 7);
        SetarCampoValorTamanho('CodigoTributacaoMunicipio', CampoTecno('CodigoTributacaoMunicipio'), 20);
        
        // 2000 caracteres
        SetarCampoValorTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000);
        SetarCampoValorTamanhoObrigatorio('CodigoMunicipioPrestacao', CampoTecno('CodigoCidadePrestacao'), 7);
        SetarCampoValorTamanho('CodigoPaisPrestacao', CampoTecno('CodigoPais'), 4);
        
        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
          SetarCampo('ExigibilidadeIss')
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
          
        SetarCampoValorTamanho('MunicipioIncidencia', CampoTecno('MunicipioIncidencia'), 7);

        //Dados Prestador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        SetarCampoCpfCnpj('CpfTomador', 'CnpjTomador', _ValorCampo);
        if CampoTecno('CodigoCidadePrestador') = CampoTecno('CodigoCidadeTomador') then
          SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);
        SetarCampoValorTamanho('RazaoSocialTomador', CampoTecno('RazaoSocialTomador'), 150);
        SetarCampoValorTamanho('Endereco', CampoTecno('EnderecoTomador'), 125);
        SetarCampoValorTamanho('NumeroEnderecoTomador', CampoTecno('NumeroTomador'), 10);
        SetarCampoValorTamanho('Complemento', CampoTecno('ComplementoTomador'), 60);
        SetarCampoValorTamanho('Bairro', CampoTecno('BairroTomador'), 60);
        SetarCampoValorTamanho('CodigoMunicipioTomador', CampoTecno('CodigoCidadeTomador'), 7);
        SetarCampoValorTamanho('Uf', CampoTecno('UfTomador'), 2);

        if CampoTecno('ExigibilidadeIss') = '4' then
          SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));

        SetarCampoValorTamanho('Cep', CampoTecno('CepTomador'), 8);
        SetarCampoValorTamanho('Telefone', RemoveMascaraTelefone(CampoTecno('TelefoneTomador')), 12);
        SetarCampoValorTamanho('Email', CampoTecno('EmailTomador'), 80);

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        SetarCampoCpfCnpj('CpfIntermediario', 'CnpjIntermediario', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')), 15);
        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 150);

        //Dados Construção Civil
        SetarCampoValorTamanho('CodigoObra', CampoTecno('CodigoObra'), 15);
        SetarCampoValorTamanho('Art', CampoTecno('Art'), 15);

        //Regime Especial Tributação
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if (_ValorCampo <> '') and (_ValorCampo <> '0') then
        begin
          if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6']) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5, 6.');
        end;

        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional')
          else
            ExceptionValorInvalidoCampo('OptanteSimplesNacional. Valores aceitos: 1, 2.');
        end;

        //IncentivoFiscal
        SetarCampoValorTamanho('IncentivoFiscal', CampoTecno('IncentivoFiscal'), 1);

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);


      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampoValor('Id', CampoTecno('IdLote'))
      else
        SetarCampoValor('Id', CampoTecno('NumeroLote'));

      // Item do checklist - deduzir campo versão.
      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)
      else
        SetarCampoValor('Versao', '2.00');

      SetarCampoValorTamanhoObrigatorio('NumeroLote', CampoTecno('NumeroLote'), 15);

      //Dedução campo CpfCnpjRemetente
      _ValorCampo := CampoTecno('CpfCnpjRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString;
      SetarCampoCpfCnpj('Cpf', 'Cnpj', RemoveMascara(_ValorCampo));

      //Dedução campo InscricaoMunicipalRemetente
      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName(
          'InscricaoMunicipalPrestador').AsString;
      SetarCampoValorTamanho('InscricaoMunicipal', RemoveMascara(_ValorCampo), 15);

      //Dedução quantidade
      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
