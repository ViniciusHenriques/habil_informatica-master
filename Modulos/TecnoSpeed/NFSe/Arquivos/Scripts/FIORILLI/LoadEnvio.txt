{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _PastaTecnoNFSe, _dscidade_lote: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _QtdeRps: Integer;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := (UpperCase(Params.Values['EnvioSincrono'])) = 'TRUE';
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade
    if EnvioSincrono then
        _dscidade_lote := 'EnviarLoteRpsSincronoEnvio'
      else
        _dscidade_lote := 'EnviarLoteRpsEnvio';

      Datasets.GetDataSetByName(_dscidade_lote).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15);

        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);

        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8) or (Length(_ValorCampo) = 15) or (Length(_ValorCampo) = 10)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'yyyy-mm-dd');
           SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DDThh:mm:ss');

       if CampoTecno('Competencia') <> '' then
         begin
           _ValorCampo := FormatAnyDateTime(CampoTecno('Competencia'), 'yyyy-mm-dd');
           SetarCampoValor('Competencia', _ValorCampo);
         end
       else
         RaiseException('Para essa cidade o campo Competencia é obrigatorio e deve ser no seguinte formato: YYYY-MM-DD');

        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('OptanteSimplesNacional')
        else
          RaiseException('Para essa cidade o campo OptanteSimplesNacional é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');

        SetarCampo('IncentivoFiscal');

         _ValorCampo := CampoTecno('SituacaoNota');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampoValor('Status', CampoTecno('SituacaoNota'))
        else
          RaiseException('Para essa cidade o campo SituacaoNota é obrigatorio e deve ser 1 - Normal, ou 2 - Cancelada');

        if not AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['', '0']) then
        begin
          if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6'])) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5, 6.');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);

        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('DescontoIncondicionado', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        if CampoTecno('ExigibilidadeISS') <> '' then
          SetarCampo('ExigibilidadeISS')
        else
          Campo(_DsCidadeAtual, 'ExigibilidadeISS').AsString := Campo(_DsCidadeAtual, 'IssRetido').AsString;

        SetarCampoCurrency('ValorIss', False);

        SetarCampoCurrency('OutrasRetencoes', False);

        if CampoTecno('ResponsavelRetencao') <> '' then
        begin
           if AnsiMatchText(CampoTecno('ResponsavelRetencao'), ['1', '2']) then
             SetarCampo('ResponsavelRetencao')
           else
              RaiseException('Valor inválido para o campo ResponsavelRetencao. Valores aceitos: 1 - Tomador; 2 - Intermediário.');
        end;

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := FormataFloat(StrToFloat(StringReplace(CampoTecno('AliquotaISS'), ',', '.', [])), 6, 5);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          RaiseException('Valor inválido para o campo AliquotaISS, o mesmo deve ser informado da seguinte maneira: "5.00" para 5%');

        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, False);
        _ValorCampo := AdicionarPonto(_ValorCampo);
        SetarCampoObrigatorioValorTamanho('ItemListaServico', 'CodigoItemListaServico', _ValorCampo, 5);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
        VerificaSeEhNumero('CodigoCnae', _ValorCampo);
        SetarCampoTamanho('CodigoCnae','CodigoCnae', 7);

        SetarCampoTamanho('CodigoTributacaoMunicipio','CodigoTributacaoMunicipio', 20);

        SetarCampoObrigatorioTamanho('DiscriminacaoServico','Discriminacao', 2000);

        _ValorCampo := CampoTecno('CodigoCidadePrestacao');
        if _ValorCampo = '' then
          RaiseException('Valor inválido para o campo CodigoCidadePrestacao')
        else
        begin
          _ValorCampo := ConverterCodigoMunicipio( _ValorCampo, True);
          SetarCampoValor('CodigoMunicipio', _ValorCampo);
        end;

        if CampoTecno('ExigibilidadeISS') = '4' then
          SetarCampo('CodigoPais');

        if CampoTecno('MunicipioIncidencia') <> '' then
          SetarCampo('MunicipioIncidencia')
        else
          SetarCampoValor('MunicipioIncidencia', _ValorCampo);

        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', RemoveMascara(CampoTecno('CpfCnpjPrestador')));

        SetarCampoValorTamanho('InscricaoMunicipalPrestador', CampoTecno('InscricaoMunicipalPrestador'),15);

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        if _ValorCampo <> '' then
        begin
          case Length(_ValorCampo) of
            11: SetarCampoValor('CpfTomador', _ValorCampo);
            14: SetarCampoValor('CnpjTomador', _ValorCampo);
          else
            RaiseException('Valor inválido para o campo CpfCnpjTomador, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
          end;
        end;

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 150);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', CampoTecno('InscricaoMunicipalTomador'), 15);
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);

        if CampoTecno('CodigoCidadeTomador') <> '' then
        begin
          _ValorCampo := ConverterCodigoMunicipio(CampoTecno('CodigoCidadeTomador'), True);
          SetarCampoValor('CodigoMunicipioTomador', _ValorCampo);
        end;

        if CampoTecno('UfTomador') <> '' then
          SetarCampoTamanho('UfTomador', 'UfTomador', 2)
        else
        begin
          // Conteudo do _ValorCampo: CodigoCidadeTomador
          if _ValorCampo <> '' then
          begin
            _ValorCampo := BuscarInfoCidade('CodIBGE', _ValorCampo, 'UF');
            SetarCampoValor('UfTomador', _ValorCampo);
          end;
        end;

        If CampoCidade('CodigoMunicipioTomador') = '9999999' then
          SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));

        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoTamanho('CepTomador', 'CepTomador', 8);

        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoTamanho('EmailTomador', 'EmailTomador', 80);

        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 150);
        
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;

        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', CampoTecno('InscricaoMunicipalIntermediario'), 15);

        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);

        _DsCidadeAtual.Post;

        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(_dscidade_lote);

      _ValorCampo := CampoTecno('NumeroLote');
      VerificaSeEhNumero('NumeroLote', _ValorCampo);
      SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', _ValorCampo, 15); 
      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote')
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('IdLote', _ValorCampo);
      end;

      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)
      else if SameText(Params.Values['Cidade'], 'SAQUAREMA') then
        SetarCampoValor('Versao', '2.02')
      else
        SetarCampoValor('Versao', '2.00');

      _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjRemetente'));

      if (Length(_ValorCampo) = 14) then
      begin
        if CampoTecno('CpfCnpjRemetente') <> '' then
          SetarCampoValor('Cnpj', _ValorCampo)
        else
          SetarCampoValor('Cnpj', RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString));
      end
      else
        SetarCampoValor('Cpf', _ValorCampo);

      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
      SetarCampoValor('InscricaoMunicipal', _ValorCampo);

      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(_dscidade_lote).Post;
    end
    else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.
