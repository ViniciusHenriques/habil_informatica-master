{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo: string;
  _ValorCampoVal, _ValorCampoValtrib: string;
  _NomeCampo, _CidadeConfigurada: string;
  _inicio, _QtdeRps: Integer;  
  _IndexCidadeConfig: Integer;
  _CodigoCidadeConfig: string;
  _linha: string;
  _PastaTecnoNFSe: string;
  i : Integer;
  CODIGOS_CIDADES : array[0..1] of string;
  NOMES_CIDADES : array[0..1] of string;
const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'ws_gera_nfse_x_pnfse';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}

  procedure ExceptionValorInvalidoCampo(const aNomeCampo: string);
  begin
    RaiseException('Valor inválido para o campo: ' + aNomeCampo);
  end;
 
  procedure SetarCampoCurrencySiappa(const aCampoTecno, aCampoSiappa: string);
  var
    _ValorCur: Currency;
    _ValorStr: string;
  begin
    if CampoTecno(aCampoTecno) <> '' then
    begin
      try
        _ValorCur := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
        _ValorStr := StringReplace(CurrencyToXsdCurrency(_ValorCur), ',', '.', [rfReplaceAll]);
      except
        RaiseException('Não foi possível realizar a conversão do campo: ' + aCampoTecno);
      end;

      Campo(_DsCidadeAtual, aCampoSiappa).AsString := _ValorStr;
    end;
  end;

  procedure VerificaMoedaZero(const aCampoTecno, aCampoSiappa: string);
  var
    _Valor: string;
  begin
    _Valor := CampoTecno(aCampoTecno);
    if (_Valor = '0') or (_Valor = '0.00') then
      SetarCampoValor(aCampoSiappa, '')
    else
      SetarCampoCurrencySiappa(aCampoTecno, aCampoSiappa);
  end;

  function EnvioSincrono: Boolean;
  begin
    Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
  end;

begin
  //Incrementar tambem na declaracao do array
  CODIGOS_CIDADES[0] := '3524006';
  CODIGOS_CIDADES[1] := '3505906';
  NOMES_CIDADES[0] := 'ITUPEVASP';
  NOMES_CIDADES[1] := 'BATATAISSP';
  
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    if not EnvioSincrono then
      RaiseException('Geração de Xml Assíncrono não suportado pelo padrão Siappa');

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Editar dados carregados no Datasets, para fazer algumas transformações
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      if _QtdeRps > 1 then
        RaiseException('Envio síncrono não suporta envio em Lote, envie somente 1 RPS.');

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        SetarCampoValor('InscricaoSequencial', '?');  // Extras
        SetarCampoValor('SenhaWS', '?');  // Extras
        SetarCampoValor('AmbienteExecucao', 'T');  // T: Teste - D: Definitivo
       
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        VerificaSeEhNumero('CpfCnpjPrestador', _ValorCampo);
        case length(_ValorCampo) of
          14:
            SetarCampoObrigatorioValorTamanho('CpfCnpjPrestador', 'CpfCnpjPrestador', _ValorCampo, 14);
          11:
            SetarCampoObrigatorioValorTamanho('CpfCnpjPrestador', 'CpfCnpjPrestador', _ValorCampo, 11);
        else
          RaiseException('Valor inválido para o campo CpfCnpjPrestador, deve conter 11 ou 14 números');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        SetarCampoObrigatorioValorTamanho('SequenciaPreNota', 'NumeroRps', CampoTecno('NumeroRps'), 8);
        VerificaSeEhNumero('NumeroRps', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('SerieRps'));
        SetarCampoObrigatorioValorTamanho('SequenciaBloco', 'SerieRps', CampoTecno('SerieRps'), 8);
        VerificaSeEhNumero('SerieRps', _ValorCampo);

        SetarCampoObrigatorioValorTamanho('CodigoValidacaoPreNota', 'IdRps', CampoTecno('IdRps'), 10);

        _ValorCampo := CampoTecno('TipoDocumentoTomador');
        if _ValorCampo <> '' then
        begin
          case AnsiIndexText(_ValorCampo, ['1', '2']) of
            0:
              SetarCampoValor('NaturezaTomador', 'F');
            1:
              SetarCampoValor('NaturezaTomador', 'J');
          else
            ExceptionValorInvalidoCampo('TipoDocumentoTomador. Valores aceitos: "1" para Tomador Fisico e "2" para Tomador Juridico');
          end;
        end
        else
        begin
          _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
          case length(_ValorCampo) of
            14:
              SetarCampoValor('NaturezaTomador', 'J');
            11:
              SetarCampoValor('NaturezaTomador', 'F');          
          end;
        end;
        
        SetarCampoObrigatorioValorTamanho('RazaoSocialTomador', 'RazaoSocialTomador', CampoTecno('RazaoSocialTomador'), 50);
        
        ValidaCampoVazio('CpfCnpjTomador');
        _ValorCampo := CampoTecno('CpfCnpjTomador');
        if _ValorCampo <> '' then
        begin
          _ValorCampo := RemoveMascara(_ValorCampo);
          VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
          case length(_ValorCampo) of
            14:
              SetarCampoObrigatorioValorTamanho('CpfCnpjTomador', 'CpfCnpjTomador', _ValorCampo, 14);
            11:
              SetarCampoObrigatorioValorTamanho('CpfCnpjTomador', 'CpfCnpjTomador', _ValorCampo, 11);
          else
            RaiseException('Valor inválido para o campo CpfCnpjTomador, deve conter 11 ou 14 números');
          end;
        end;

        SetarCampoObrigatorioValorTamanho('TipoLogradouroTomador', 'TipoLogradouroTomador', CampoTecno('TipoLogradouroTomador'), 3);
        SetarCampoObrigatorioValorTamanho('EnderecoTomador', 'EnderecoTomador', CampoTecno('EnderecoTomador'), 50);
        SetarCampoObrigatorioValorTamanho('NumeroTomador', 'NumeroTomador', CampoTecno('NumeroTomador'), 5);
        SetarCampoObrigatorioValorTamanho('ComplementoTomador', 'ComplementoTomador', CampoTecno('ComplementoTomador'), 20);
        SetarCampoObrigatorioValorTamanho('BairroTomador', 'BairroTomador', CampoTecno('BairroTomador'), 20);
        if CampoTecno('DescricaoCidadeTomador') <> '' then
          SetarCampoObrigatorioValorTamanho('CodigoCidadeTomador', 'CodigoCidadeTomador', CampoTecno('DescricaoCidadeTomador'), 50)
        else
          SetarCampoObrigatorioValorTamanho('CodigoCidadeTomador', 'CodigoCidadeTomador', BuscarInfoCidade('CodIBGE', CampoTecno('CodigoCidadeTomador'), 'NomeMunicSIAFI'), 50);
        SetarCampoObrigatorioValorTamanho('UfTomador', 'UfTomador', CampoTecno('UfTomador'), 2);
        SetarCampoObrigatorioValorTamanho('CepTomador', 'CepTomador', CampoTecno('CepTomador'), 8);

        SetarCampoValor('EmailTomador', CampoTecno('EmailTomador'));

        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, False);  // Siappa: sem ponto no ItemListaServico
        VerificaSeEhNumero('CodigoItemListaServico', StringReplace(_ValorCampo, '.', '', [rfReplaceAll]));
        SetarCampoObrigatorioValorTamanho('CodigoItemListaServico', 'CodigoItemListaServico', _ValorCampo, 4);

        SetarCampoObrigatorioValorTamanho('DiscriminacaoDetalhada', 'DiscriminacaoServico', CampoTecno('DiscriminacaoServico'), 1000);
        SetarCampoObrigatorioValorTamanho('DescricaoResumidaNFSe', 'DescricaoRPS', CampoTecno('DescricaoRPS'), 100);

        VerificaMoedaZero('AliquotaISS', 'AliquotaAplicada');
        ValidaCampoVazio('ValorServicos');
        SetarCampoCurrencySiappa('ValorServicos', 'ValorBruto');
        VerificaMoedaZero('ValorDeducoes', 'ValorDeducoes');

        _CidadeConfigurada := Params.Values['Cidade'];
        for i := 0 to Length(NOMES_CIDADES)-1 do
        begin
          if SameText(_CidadeConfigurada, NOMES_CIDADES[i]) then
          begin
            _ValorCampo := CampoTecno('MunicipioIncidencia');
          if _ValorCampo = CODIGOS_CIDADES[i] then
            SetarCampoValor('LocalRetencao', 'S')
          else
            SetarCampoValor('LocalRetencao', 'N');
          end
          else
            SetarCampoValor('LocalRetencao', 'N');
        end;        

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      SetarCamposMunicipio(false);
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.