{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _DSSucesso, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;

  procedure GetPonteirosDataSets;
  begin
    _DSSucesso := Datasets.GetDataSetByName('GerarNfseResposta');
    _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
    if (_DSSucesso = nil) then
      RaiseException('DataSet GerarNfseResposta não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
  end;

  function UnindentXml(const aXml: string): string;
  var
    _sl: TStringList;
    i: integer;
  begin
    _sl := TStringList.Create;
    _sl.Text := aXml;
    for i:= 0 to _sl.Count-1 do
      _sl[i] := Trim(_sl[i]);
    Result := StringReplace(_sl.Text, #13#10, '', [rfReplaceAll]);
    Result := StringReplace(_sl.Text, #13, '', [rfReplaceAll]);
    Result := StringReplace(_sl.Text, #10, '', [rfReplaceAll]);
    _sl.Free;
  end; 

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                         Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                         Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                             Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                             Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetStatus : string;
  begin
    if GetMotivo <> '' then
     Result := 'ERRO'
  else
     Result := 'SUCESSO';
  end;

  // Captura a mensagem do retorno faulstring
  function GetFaultString(aInput: string): string;
  var
    _Value : string;
  begin
    if xmlSelectNodeValue(aInput, '//*[local-name()="faultstring"]', _Value) then
      Result := _Value
    else
      Result := aInput;
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de Resultado
  procedure AddValueListFields(const aFieldName : string; const aFieldValue : string;
    var aListFields : TStringList);
  begin
    if aListFields.IndexOf(aFieldName) > -1 then
      aListFields[aListFields.IndexOf(aFieldName)] := aFieldValue;
  end;

  function GetXmlNFSe(const aXml : string) : string;
  begin    
    Result := XmlSelect(aXml, '//*[local-name()="GerarNfseResposta"]')
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult(var aListFields : TStringList) : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to aListFields.Count - 1 do
      Result := Result + aListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult(aListFieldsResult) + #13#10
    else
      Result := FormatLineResult(aListFieldsResult) +
        Params.Values['DelimitadorDaLinha'];
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponseNota : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para ordem dos Campos do Params
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  function GetListFieldsFaulstring(var aListFields : TStringList; const aInput: string): String;
  var
    _Motivo: string;
  begin
    aListFields := CreateFieldsResponseFalha;
    try
      _Motivo := 'Falha na comunicação com WebService-' + GetFaultString(aInput);
      AddValueListFields('Status', 'ERRO', aListFields);
      AddValueListFields('Motivo',_Motivo, aListFields);
      Result := FormatLineResult(aListFields) + Params.Values['DelimitadorDaLinha'];
    Finally
      aListFields.Free;
    end;
  end;

  function GetListFieldsNota(var aDSSucesso, aDSFalha : TSpdXSDClientDataSet;
    var aListFields : TStringList; const aXpathNFSe, aParamName : string): String;
  var
    _Motivo, _ValorCampo, _XmlNota: string;
  begin    
    _Motivo := GetMotivo;
    if _Motivo = '' then
    begin
      aDSSucesso.First;
      while not aDSSucesso.Eof do
      begin
        aListFields := CreateFieldsResponseNota;
        try
          AddValueListFields('Status', 'SUCESSO', aListFields);
          _XmlNota := Params.Values['XML'];

          _ValorCampo := aDSSucesso.FieldByName('Cnpj').AsString;
          if _ValorCampo <> '' then
            AddValueListFields('Cnpj', _ValorCampo, aListFields)
          else
            AddValueListFields('Cpf', aDSSucesso.FieldByName('Cpf').AsString,
              aListFields);
                         
          AddValueListFields('NumeroRps',
            aDSSucesso.FieldByName('NumeroRps').AsString, aListFields);
            
          AddValueListFields('SerieRps',
            aDSSucesso.FieldByName('SerieRps').AsString, aListFields);          

          AddValueListFields('NumeroNFSe', 
            aDSSucesso.FieldByName('NumeroNfse').AsString, aListFields);                    

          AddValueListFields('CodVerificacao',
            aDSSucesso.FieldByName('CodigoVerificacao').AsString, aListFields);

          AddValueListFields('Situacao', 'AUTORIZADA', aListFields);                             
          AddValueListFields('Xml', GetXmlNFSe(_XmlNota), aListFields);

          AddValueListFields('Motivo', '', aListFields);
          AddValueListFields('Tipo', '', aListFields);
          AddValueListFields('DataAutorizacao', '', aListFields); 
          AddValueListFields('DataCancelamento', '', aListFields);
          AddValueListFields('ChaveCancelamento', '', aListFields);
          AddValueListFields('InscMunicipal', '', aListFields);
          AddValueListFields('DataEmissaoNFSe', '', aListFields);         

          Result := Result + GetResult(aListFields);
          Finally
            aListFields.Free;
          end;
          aDSSucesso.Next;
        end;
      end
      else
      begin
        aListFields := CreateFieldsResponseNota;
        try
          AddValueListFields('Motivo', _Motivo, aListFields);
          AddValueListFields('Status', 'ERRO', aListFields);
          AddValueListFields('Cnpj', '', aListFields);
          AddValueListFields('InscMunicipal', '', aListFields);
          AddValueListFields('SerieRps',  '', aListFields);
          AddValueListFields('NumeroRps', '', aListFields);
          AddValueListFields('NumeroNFSe', '', aListFields);
          AddValueListFields('DataEmissaoNFSe', '', aListFields);
          AddValueListFields('DataAutorizacao', '', aListFields);
          AddValueListFields('CodVerificacao', '', aListFields);
          AddValueListFields('Situacao', '', aListFields);
          AddValueListFields('DataCancelamento', '', aListFields);
          AddValueListFields('ChaveCancelamento', '', aListFields);
          AddValueListFields('Xml', '', aListFields);
          AddValueListFields('Tipo', '', aListFields);
          Result := Result + GetResult(aListFields);
        Finally
          aListFields.Free;
        end;
      end;
  end;

begin
  if Params.Values['faultstring'] <> '' then
    Output := GetListFieldsFaulstring(_ListFields, Input)
  else
  begin
    Progress('Obtendo ponteiros dos DataSets.');
    GetPonteirosDataSets;

    Output := GetListFieldsNota(_DSSucesso, _DSFalha, _ListFields,'', 'XmlNFSe');
  end;

  Progress('Valores adicionados com sucesso.');
end.
