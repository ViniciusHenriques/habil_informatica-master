{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;

  _DsTecnoAtual, _DsCidadeAtual, _DsServicoAtual, _DsTecnoServico: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  _Vlr: Double;
  DSCIDADE_LOTE: string;
  _ValorCur: Currency;
  _ValorStr: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'Rps';
  DSTECNO_SERVICO = 'Servico';
  DSCIDADE_SERV = 'Servico';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasetsItens.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipioDS.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
  end;

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;
  
  procedure SetarCampoValorServicoFintel(const aCampo, aValor: string);
  begin
    Campo(_DsServicoAtual, aCampo).AsString := aValor;
  end;
  
  { Transformável: para Fintel, 5% = 5.00 }
  procedure SetarAliquotaFintel;
  var
    _Aliquota: string;
  begin
    if _DsTecnoAtual.Name = 'Servico' then
      _Aliquota := 'AliquotaServico'
    else
      _Aliquota := 'AliquotaISS';

    if CampoTecno(_Aliquota) <> '' then
    begin
      if DivideCampoPorcentagem(CampoTecno(_Aliquota)) then
      begin
        _Vlr := StrToFloat(StringReplace(CampoTecno(_Aliquota),',','.',[rfReplaceAll]));
        _ValorCampo := FormataFloat(_Vlr, 6, 4);
        if _ValorCampo = '0' then
          SetarCampoValorServicoFintel('Aliquota', '0.00')
        else if Length(_ValorCampo) = 1 then
          SetarCampoValorServicoFintel('Aliquota', _ValorCampo + '.00')
        else
          SetarCampoValorServicoFintel('Aliquota', _ValorCampo)
      end
      else
        ExceptionValorInvalidoCampo(_Aliquota);
    end;
  end;
  
  procedure SetarCampoCurrencyServFintel(const aCampoFintel, aCampoTecno: string; const SetarSeZero: boolean);
  var _Valor: Currency;
  begin
    _Valor := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
    if (_Valor <> 0) or SetarSeZero then
      Campo(_DsServicoAtual, aCampoFintel).AsString :=
        CurrencyToXsdCurrency(_Valor);
  end; 

  procedure ValidaTamanhoMaximo(const aCampoTecno : String;
    const aQtd: Integer; const aObrigatorio: boolean);
  begin
    if length(CampoTecno(aCampoTecno)) > aQtd then
      RaiseException('Valor inválido para o campo: ' + aCampoTecno + 
        ', Informe no máximo ' + IntToStr(aQtd) + ' caracteres.')
    else if ((Length(CampoTecno(aCampoTecno)) = 0) and aObrigatorio) then
      RaiseException('O campo: ' + aCampoTecno + 'é obrigatório' + 
      ', e deve possuir no máximo ' + IntToStr(aQtd) + ' caracteres.'); 
  end;

  procedure SetarCamposServico;
  begin
    SetarCampoCurrencyServFintel('ValorServicos', 'ValorServicos', True);    
    SetarCampoCurrencyServFintel('ValorIss', 'ValorIss', True);
    SetarAliquotaFintel;

    if CampoTecno('BaseCalculo') <> '' then
      SetarCampoCurrencyServFintel('BaseCalculo', 'BaseCalculo', True)
    else
      SetarCampoCurrencyServFintel('BaseCalculo', 'ValorServicos', True);
    
    _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('IssRetido').AsString;
    case AnsiIndexText(_ValorCampo, ['1', 'sim', 'true', '2', 'nao', 'não',
    'false']) of
      0, 1, 2: SetarCampoValorServicoFintel('IssRetido', '1');
      3, 4, 5, 6: SetarCampoValorServicoFintel('IssRetido', '2');
    else
      ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
    end;
    
    _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('ResponsavelRetencao').AsString;
    case AnsiIndexText(_ValorCampo, ['1', '2', '']) of
      0: SetarCampoValorServicoFintel('ResponsavelRetencao', '1');
      1: SetarCampoValorServicoFintel('ResponsavelRetencao', '2');
      2: SetarCampoValorServicoFintel('ResponsavelRetencao', '');
    else
      ExceptionValorInvalidoCampo('ResponsavelRetencao. Valores aceitos: 1 ou 2');
    end;
    
    _ValorCampo := CampoTecno('CodigoItemListaServico');
    VerificaSeEhNumero('CodigoItemListaServico', StringReplace(_ValorCampo, '.', '', [rfReplaceAll]));
    _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);
    ValidaTamanhoMaximoObrigatorio('CodigoItemListaServico', 5);
    SetarCampoValorServicoFintel('CodigoItemListaServico', _ValorCampo);

    _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
    VerificaSeEhNumero('CodigoCnae', _ValorCampo);      
    ValidaTamanhoMaximoObrigatorio('CodigoCnae', 7);
    SetarCampoValorServicoFintel('CodigoCnae', _ValorCampo);    

    SetarCampoValorServicoFintel('CodigoTributacaoMunicipio',
      TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CodigoTributacaoMunicipio').AsString);
    
    ValidaTamanhoMaximo('DiscriminacaoServico', 2000, True);
    SetarCampoValorServicoFintel('DiscriminacaoServico', CampoTecno('DiscriminacaoServico'));          
    
    _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CodigoCidadePrestacao').AsString;
    VerificaSeEhNumero('CodigoCidadePrestacao', _ValorCampo);
    ValidaTamanhoMaximo('CodigoCidadePrestacao', 7, True);
    SetarCampoValorServicoFintel('CodigoCidadePrestacao', _ValorCampo);
    
    _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CodigoPais').AsString;
    case AnsiIndexText(_ValorCampo, ['1058', '01058', 'BRASIL', 'brasil', 'Brasil', '']) of
      0, 1, 2, 3, 4, 5: SetarCampoValorServicoFintel('CodigoPais', '1058')
    else
      SetarCampoValorServicoFintel('CodigoPais', _ValorCampo);
    end;
  
    _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('ExigibilidadeIss').AsString;
    if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
      SetarCampoValorServicoFintel('ExigibilidadeIss', _ValorCampo)
    else
      ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.'); 

    _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('MunicipioIncidencia').AsString;
    if _ValorCampo <> '' then
      SetarCampoValorServicoFintel('MunicipioIncidencia', _ValorCampo);
  end;

  
begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      if EnvioSincrono then
        DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio'
      else
        RaiseException('Geração de Xml Assíncrono não suportado pelo padrão Fintel.');

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasetsItens;
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);
      _DsServicoAtual := Datasets.GetDataSetByName(DSCIDADE_SERV);
      _DsTecnoServico := Datasets.GetDataSetByName(DSTECNO_SERVICO);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        { Dados RPS }
        _ValorCampo := 'RPS_' + CampoTecno('NumeroRps');
        SetarCampoValor('IdRps', _ValorCampo);
        _ValorCampo := 'ID_' + CampoTecno('NumeroRps');
        SetarCampoValor('IdValoresServico', _ValorCampo);        

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15);
        
        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);
        
        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma:'+
            ' 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'YYYY-MM-DD"T"hh:mm:ss');
           SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte'+
            ' formato: YYYY-MM-DDThh:mm:ss');

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'));
          '': SetarCampoValor('Status', '1');
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);
        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma:'+
            ' 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        //Competencia
        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao')
        else
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('Competencia');
          end;
        end;
        if _ValorCampo <> '' then
          SetarCampoValor('Competencia', _ValorCampo);

        { Tag ValoresServico }
        SetarCampoCurrency('ValorPis', True);
        SetarCampoCurrency('ValorCofins', True);
        SetarCampoCurrency('ValorInss', True);
        SetarCampoCurrency('ValorIr', True);
        SetarCampoCurrency('ValorCsll', True);
        SetarCampoCurrency('ValorIss', True);

        if CampoTecno('ValorLiquidoNfse') <> '' then
          SetarCampoCurrency('ValorLiquidoNfse', True)
        else
          SetarCampoCurrencyValor('ValorServicos',
            'ValorLiquidoNfse', True);

        if CampoTecno('ValorServicos') <> '' then
          SetarCampoCurrency('ValorServicos', True)
        else
          SetarCampoCurrencyValor('ValorLiquidoNfse',
            'ValorServicos', True);       
        
        { Dados Prestador }
        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador',
          RemoveMascara(CampoTecno('CpfCnpjPrestador')));        
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
        VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
        SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador',
          'InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoObrigatorioValorTamanho('CpfTomador', 'CpfCnpjTomador', _ValorCampo, 11);
          14: SetarCampoObrigatorioValorTamanho('CnpjTomador', 'CpfCnpjTomador', _ValorCampo, 14);
        else
          RaiseException('Valor inválido para o campo CpfCnpjTomador, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;        
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);

        SetarCampoValorTamanho('InscricaoMunicipalTomador',
          RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);        
        
        SetarCampoValorTamanhoObrigatorio('RazaoSocialTomador',
          CampoTecno('RazaoSocialTomador'), 150);
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);
        
        _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadeTomador'));
        VerificaSeEhNumero('CodigoCidadeTomador', _ValorCampo);
        SetarCampoTamanho('CodigoCidadeTomador', 'CodigoCidadeTomador', 7);        
        
        SetarCampoTamanho('UfTomador', 'UfTomador', 2);
        
        _ValorCampo := CampoTecno('PaisTomador');
        case AnsiIndexText(_ValorCampo, ['1058', '01058', 'BRASIL', 'brasil', 'Brasil']) of
          0, 1, 2, 3, 4: SetarCampoValor('CodigoPaisTomador', '1058')
        else
          SetarCampoValor('CodigoPaisTomador', _ValorCampo);
        end;
        
        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoTamanho('CepTomador', 'CepTomador', 8);
        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        
        _ValorCampo := StringReplace(CampoTecno('EmailTomador'),' ','',[rfReplaceAll]);
        SetarCampoValorTamanho('EmailTomador', _ValorCampo, 80);

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        VerificaSeEhNumero('CpfCnpjIntermediario', _ValorCampo);
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;        
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario'));
        VerificaSeEhNumero('InscricaoMunicipalIntermediario', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', _ValorCampo, 15);
        
        SetarCampo('RazaoSocialIntermediario');

        //Dados Construção Civil
        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);

        //Regime Especial Tributação
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if _ValorCampo <> '' then
        begin
          if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','8']) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao,'+
              ' valores aceitos: 1, 2, 3, 4, 5, 6 e 8');
        end;

        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional')
          else
            ExceptionValorInvalidoCampo('OptanteSimplesNacional. Valores aceitos: 1, 2.');
        end;

        //IncentivoFiscal
        _ValorCampo := CampoTecno('IncentivoFiscal');
        case _ValorCampo of
          '1', '2': SetarCampo('IncentivoFiscal')
          else
            ExceptionValorInvalidoCampo('IncentivoFiscal. Valores aceitos: 1, 2.');
        end;        
        
        { Setar Campos para o Primeiro Servico }
        _DsServicoAtual.Edit;
          SetarCamposServico;
        _DsServicoAtual.Post;
        _DsCidadeAtual.Post;
        
        { Setar Campos para os serviços adicionais }
        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_SERVICO);
        _DsTecnoAtual.First;        
        while not _DsTecnoAtual.Eof do
        begin          
          _DsServicoAtual.Append;
            SetarCamposServico;
          _DsServicoAtual.Post;
          _DsTecnoAtual.Next;
        end;
        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
        _DsTecnoAtual.Next;
      end;
      
      SetarCamposMunicipioDS([DSCIDADE_NOTA, DSCIDADE_SERV]);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote')
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('IdLote', _ValorCampo);
      end;

      // Item do checklist - deduzir campo versão.
      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)
      else
        SetarCampoValor('Versao', '2.0');

      _ValorCampo := CampoTecno('NumeroLote');
      VerificaSeEhNumero('NumeroLote', _ValorCampo);
      SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', _ValorCampo, 15);

      //Dedução campo CpfCnpjRemetente
      if (CampoTecno('CpfCnpjRemetente') <> '') then
        SetarCpfCnpj('CpfRemetente', 'CnpjRemetente', 'CpfCnpjRemetente',
          RemoveMascara(CampoTecno('CpfCnpjRemetente')))
      else
        SetarCpfCnpj('CpfRemetente', 'CnpjRemetente', 'CpfCnpjRemetente',
          RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString));

      //Dedução campo InscricaoMunicipalRemetente
      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
      _ValorCampo := RemoveMascara(_ValorCampo);
      VerificaSeEhNumero('InscricaoMunicipalRemetente', _ValorCampo);
      SetarCampoObrigatorioValorTamanho('InscricaoMunicipalRemetente',
        'InscricaoMunicipalPrestador',  RemoveMascara(_ValorCampo), 15);

      //Dedução quantidade
      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
