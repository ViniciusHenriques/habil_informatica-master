{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;
  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  DSCIDADE_NOTA, DSCIDADE_LOTE: string;
const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
  end;

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

  procedure ExceptionCampoObrigatorio(const aCampo: string);
  begin
    RaiseException('Campo ' + aCampo + ' não pode ser vazio para essa cidade.');
  end;

  procedure SetarCampoCpfCnpjArrecadaNet(const aNomeCampoCpf, aNomeCampoCnpj, aValor: string);
  begin
    case Length(aValor) of
      14:
        SetarCampoValor(aNomeCampoCnpj, aValor);
      11:
        SetarCampoValor(aNomeCampoCpf, aValor);
    else
      RaiseException('Valor invalido para o campo: ' + aNomeCampoCpf + '/' + aNomeCampoCnpj + '. Deve conter 11 ou 14 caracteres.');
    end;
  end;

  procedure VerificaMaiorQueZero(const aCampoTecno : String);
  var
    _Valor : String;
    _Valor64 : Int64;
  begin
    _Valor := StringReplace(CampoTecno(aCampoTecno), '.', '', [rfReplaceAll]);
    _Valor := StringReplace(_Valor, ',', '', [rfReplaceAll]);
    VerificaSeEhNumero(aCampoTecno, _Valor);
    if trim(_Valor) = '' then
      RaiseException('Valor inválido para o campo ' + aCampoTecno + ', deve ser um número maior que 0.');
    _Valor64 := StrToInt64(_Valor);
    if _Valor64 <= 0 then
      RaiseException('Valor inválido para o campo ' + aCampoTecno + ', deve ser um número maior que 0.');
  end;

  procedure VerificaLoteTx2Municipio;
  var
    i, y: integer;
  begin
    for i := 0 to _Tx2.Count-1 do
    begin
      if SameText(UpperCase(Trim(_Tx2[i])), 'INCLUIRRPS') then
        Inc(y);
      if y > 1 then
        RaiseException('Envio em Lote não suportado para o padrão ArrecadaNet.');
    end;
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;
    VerificaLoteTx2Municipio;
    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      if EnvioSincrono then
        DSCIDADE_NOTA := 'GerarNfseEnvio'
      else
        RaiseException('Geração de XML assíncrono não implementado para o padrão ArrecadaNet.');

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      if _DsTecnoAtual.RecordCount > 1 then
        RaiseException('Envio em Lote não suportado para o padrão ArrecadaNet.');

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS
        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := Format1('RPS_%s', CampoTecno('NumeroRps'));
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps', 'NumeroRps', 15);

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'YYYY-MM-DD"T"hh:mm:ss');
            SetarCampoValor('DataEmissao', _ValorCampo);
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
        end;    

        //Dados Servico
        VerificaMaiorQueZero('ValorServicos')
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', True);
        SetarCampoCurrency('ValorPis', True);
        SetarCampoCurrency('ValorCofins', True);
        SetarCampoCurrency('ValorInss', True);
        SetarCampoCurrency('ValorIr', True);
        SetarCampoCurrency('ValorCsll', True);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.', []);
          FormataFloat(StrToFloat(_ValorCampo), 6, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('AliquotaISS');

        SetarCampoCurrency('DescontoIncondicionado', True);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
          else ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        _ValorCampo := CampoTecno('CodigoTributacaoMunicipio');
        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(_ValorCampo, True);
        SetarCampoValor('CodigoTributacaoMunicipio', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadePrestacao'));
        VerificaSeEhNumero('CodigoCidadePrestacao', _ValorCampo);
        SetarCampoObrigatorioTamanho('CodigoCidadePrestacao', 'CodigoCidadePrestacao', 7);

        // 2000 caracteres
        SetarCampoObrigatorioTamanho('DiscriminacaoServico', 'Discriminacao', 2000);

        //Dados Prestador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));        
        VerificaSeEhNumero('CpfCnpjPrestador', _ValorCampo);
        SetarCampoCpfCnpjArrecadaNet('CpfPrestador', 'CnpjPrestador', _ValorCampo);

        _ValorCampo := CampoTecno('InscricaoMunicipalPrestador');
        if _ValorCampo = '' then
          _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
        _ValorCampo := RemoveMascara(_ValorCampo);
        VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
        SetarCampoTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', 15);
        SetarCampoValor('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')));

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
        SetarCampoCpfCnpjArrecadaNet('CpfTomador', 'CnpjTomador', _ValorCampo);

        _ValorCampo := CampoTecno('InscricaoMunicipalTomador');        
        _ValorCampo := RemoveMascara(_ValorCampo);
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);
        SetarCampoTamanho('InscricaoMunicipalTomador', 'InscricaoMunicipalTomador', 15);
        SetarCampoValor('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')));

        _ValorCampo := CampoTecno('InscricaoEstadualTomador');        
        _ValorCampo := RemoveMascara(_ValorCampo);
        VerificaSeEhNumero('InscricaoEstadualTomador', _ValorCampo);
        SetarCampoTamanho('InscricaoEstadualTomador', 'InscricaoEstadualTomador', 15);
        SetarCampoValor('InscricaoEstadualTomador', RemoveMascara(CampoTecno('InscricaoEstadualTomador')));

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 150);
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 60);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 5);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 40);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 40);
        SetarCampoTamanho('CodigoCidadeTomador', 'CodigoCidadeTomador', 7);
        SetarCampoTamanho('CepTomador', 'CepTomador', 8);

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio(false);
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.