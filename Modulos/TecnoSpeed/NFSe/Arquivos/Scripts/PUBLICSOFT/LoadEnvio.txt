{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;
  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _AnoEmissao, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  _Vlr: Double;
  DSCIDADE_NOTA, DSCIDADE_LOTE: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\Utils.txt}

procedure ExceptionValorInvalidoCampo(const aCampo: string);
begin
  RaiseException('Valor inválido para o campo ' + aCampo);
end;

function EnvioSincrono: Boolean;
begin
  Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
end;

procedure ExceptionValorNumeroRps;
begin
  RaiseException('Valor inválido para o campo NumeroRPS. O mesmo deve' +
    ' ser informado sem caracteres especiais e tamanho máximo igual à 11');
end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    { O padrão PublicSoft possui as tags de Envio Sincrono, porém a forma como age é Assincrona }
    if EnvioSincrono then
      RaiseException('Envio em modo Síncrono indisponível para o padrão PublicSoft');

    if _PadraoTecnoNFSe then
    begin
      DSCIDADE_NOTA := 'Rps';
      DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS
        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := Format3('RPS_%s_%s_%s', CampoTecno('NumeroRps'),
            CampoTecno('SerieRps'), CampoTecno('TipoRps'));
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);

        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'YYYY-MM-DD');
          _AnoEmissao := FormatAnyDateTime(CampoTecno('DataEmissao'), 'YYYY');
           SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DDThh:mm:ss');
        
        { O campo NumeroRps deve ficar abaixo do DataEmissao, pois depende da validação do mesmo }
        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        if Length(_ValorCampo) < 12 then
        begin
          try
            FmtStr(_ValorCampo,'%.11d', [StrToint64(CampoTecno('NumeroRps'))]);
            _ValorCampo := FormatMaskText('9999999999;0;0',  _ValorCampo);
            _ValorCampo := _AnoEmissao + _ValorCampo;
            SetarCampoValor('NumeroRps', _ValorCampo);
          except
            ExceptionValorNumeroRps;
          end;
        end
        else if Length(_ValorCampo) = 15 then
        begin
          if Pos(_AnoEmissao, _ValorCampo) = 1 then
            SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15)
          else
            ExceptionValorNumeroRps;
        end
        else
          ExceptionValorNumeroRps;

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);
        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        //Competencia
        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao');
        try
          _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          SetarCampoValor('Competencia', _ValorCampo);
        except
          ExceptionValorInvalidoCampo('Competencia');
        end;

        //Dados Servico
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', True);
        SetarCampoCurrency('ValorPis', True);
        SetarCampoCurrency('ValorCofins', True);
        SetarCampoCurrency('ValorInss', True);
        SetarCampoCurrency('ValorIr', True);
        SetarCampoCurrency('ValorCsll', True);
        SetarCampoCurrency('OutrasRetencoes', True);
        SetarCampoCurrency('ValorIss', True);

        if CampoTecno('AliquotaISS') <> '' then
        begin
          _ValorCampo := CampoTecno('AliquotaISS');
          if DivideCampoPorcentagem(_ValorCampo) then
          begin
            _Vlr := AnyCurrencyToCurrency(StringReplace(_ValorCampo,',','.',[rfReplaceAll]));
            _ValorCampo := FormataFloat( _Vlr, 5, 4);            
            SetarCampoValor('Aliquota', _ValorCampo);
          end
          else
            RaiseException('Valor inválido para o campo AliquotaISS.' +
              ' O valor deve-ser preenchido considerando como percentual:'+
              ' Exemplo: Para preencher o valor de 5%,'+
              ' utiliza-se 5.00 e não 0.05');
        end;

        SetarCampoCurrency('DescontoIncondicionado', True);
        SetarCampoCurrency('DescontoCondicionado', True);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não',
          'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}
        _ValorCampo := CampoTecno('ResponsavelRetencao');
        if (trim(_ValorCampo) = '1') or (trim(_ValorCampo) = '2') then
          SetarCampo('ResponsavelRetencao');

        _ValorCampo := CampoTecno('CodigoItemListaServico');
        // Com ponto no ItemListaServico, Ex: 09.01
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);        
        if (_ValorCampo <> '') and (Length(_ValorCampo) = 5) then
          SetarCampoValor('ItemListaServico', _ValorCampo)
        else
          ExceptionValorInvalidoCampo('CodigoItemListaServico. O campo é obrigatório' +
            ' e deve possuir até 5 caracteres com o ".", por exemplo: "00.00".');

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
        VerificaSeEhNumero('CodigoCnae', _ValorCampo);
        SetarCampoTamanho('CodigoCnae','CodigoCnae', 7);

        { No momento da homologação ao mandar mais que 384 caracteres quebrava o XML da consulta }
        SetarCampoObrigatorioTamanho('DiscriminacaoServico','Discriminacao', 384);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadePrestacao'));
        VerificaSeEhNumero('CodigoCidadePrestacao', _ValorCampo);
        SetarCampoObrigatorioTamanho('CodigoCidadePrestacao', 'CodigoCidadePrestacao', 7);

        _ValorCampo := CampoTecno('CodigoPais');
        case AnsiIndexText(UpperCase(_ValorCampo), ['1058', '01058', 'BRASIL']) of
          0, 1, 2: ;
        else
          SetarCampoValor('CodigoPais', _ValorCampo);
        end;

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
          SetarCampo('ExigibilidadeIss')
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. O campo é obrigatório' +
            ' e deve ser preenchido com algum dos valores aceitos: 1, 2, 3, 4, 5, 6, 7.');

        SetarCampoTamanho('MunicipioIncidencia','MunicipioIncidencia', 7);

        //Dados Prestador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
        VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
        SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        SetarCpfCnpj('CpfTomador', 'CnpjTomador', 'CpfCnpjTomador', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 115);
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadeTomador'));
        VerificaSeEhNumero('CodigoCidadeTomador', _ValorCampo);
        SetarCampoTamanho('CodigoCidadeTomador', 'CodigoCidadeTomador', 7);

        SetarCampoTamanho('UfTomador', 'UfTomador', 2);

        if CampoTecno('ExigibilidadeIss') = '4' then
        begin
          if not AnsiMatchText(UpperCase(CampoTecno('PaisTomador')), ['01058', '1058', 'BRASIL', '']) then
            SetarCampoValor('CodigoPais', CampoTecno('PaisTomador'))
          else
            RaiseException('Valor inválido para o campo PaisTomador. Para o campo ExigibilidadeIss=4 (Exportação), deve ser informado o PaisTomador de exportação.');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));

        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoTamanho('CepTomador', 'CepTomador', 8);
        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');

        _ValorCampo := StringReplace(CampoTecno('EmailTomador'),' ','',[rfReplaceAll]);
        SetarCampoValorTamanho('EmailTomador', _ValorCampo, 80);

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        SetarCampoCpfCnpj('CpfIntermediario', 'CnpjIntermediario', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario'));
        VerificaSeEhNumero('InscricaoMunicipalIntermediario', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', _ValorCampo, 15);

        SetarCampo('RazaoSocialIntermediario');

        //Dados Construção Civil
        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);

        //Regime Especial Tributação
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if (_ValorCampo <> '') and (_ValorCampo <> '0') then
        begin
          if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6']) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao, valores aceitos: 1, 2, 3, 4, 5 e 6.');
        end;

        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional')
          else
            RaiseException('Para essa cidade o campo OptanteSimplesNacional é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');
        end;

        //IncentivoFiscal
        _ValorCampo := CampoTecno('IncentivadorCultural');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampoValor('IncentivoFiscal', _ValorCampo)
        else
          RaiseException('Para essa cidade o campo IncentivadorCultural é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // Item do checklist - deduzir campo versão.      
      SetarCampoValor('Versao', '2.03');

      _ValorCampo := CampoTecno('NumeroLote');
      VerificaSeEhNumero('NumeroLote', _ValorCampo);
      SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', _ValorCampo, 15);

      //Dedução campo CpfCnpjRemetente
      _ValorCampo := CampoTecno('CpfCnpjRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString;
      SetarCpfCnpj('Cpf', 'Cnpj', 'CpfCnpjRemetente', _ValorCampo);

      //Dedução campo InscricaoMunicipalRemetente
      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName(
          'InscricaoMunicipalPrestador').AsString;
      _ValorCampo := RemoveMascara(_ValorCampo);
      VerificaSeEhNumero('InscricaoMunicipalRemetente', _ValorCampo);
      SetarCampoValor('InscricaoMunicipal', RemoveMascara(_ValorCampo));

      //Dedução quantidade      
      SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
