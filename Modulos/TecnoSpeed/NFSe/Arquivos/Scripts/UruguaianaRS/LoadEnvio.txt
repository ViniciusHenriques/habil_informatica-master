{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;

  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  DSCIDADE_LOTE: string;
  _Vlr: Double;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
  end;

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

  function TomadorEstrangeiro: boolean;
  begin
    Result := AnsiIndexText(CampoTecno('PaisTomador'), ['', 'Brasil', 'BRASIL', 'BR', '1058', '01058']) = -1;
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      if EnvioSincrono then
        DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio'
      else
        DSCIDADE_LOTE := 'EnviarLoteRpsEnvio';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS
        SetarCampoValor('IdDeclaracao', CampoTecno('NumeroRps'));
        
        VerificaSeEhNumero('NumeroRps', CampoTecno('NumeroRps'));
        SetarCampoValorTamanhoObrigatorio('NumeroRps', CampoTecno('NumeroRps'), 15);
        
        SetarCampoValorTamanhoObrigatorio('SerieRps', CampoTecno('SerieRps'), 5);
        SetarCampoValorTamanhoObrigatorio('TipoRps', CampoTecno('TipoRps'), 1);

        _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'yyyy-mm-dd');
        SetarCampoValorTamanhoObrigatorio('DataEmissao', _ValorCampo, 10);

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);
        
        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);
        
        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        //Competencia          
        _ValorCampo := CampoTecno('Competencia'); 
        if _ValorCampo <> '' then
        begin
          _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          SetarCampoValor('Competencia', _ValorCampo);
        end
        else
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'yyyy-mm-dd');
          SetarCampoValor('Competencia', _ValorCampo);
        end;

        //Dados Servico
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('ValorIss', False);
        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        // Para Cidades GovBR2.0, 5% = 5
        if (CampoTecno('MunicipioIncidencia') <> CampoTecno('CodigoCidadePrestacao')) or (CampoTecno('OptanteSimplesNacional') = '1') or (AnsiMatchText((Params.Values['Cidade']), ['PATOBRANCO', 'CHOPINZINHOPR']))then
        begin
          if CampoTecno('AliquotaISS') <> '' then
          begin
            _ValorCampo := CampoTecno('AliquotaISS');
            if DivideCampoPorcentagem(_ValorCampo) then
            begin
              _Vlr := AnyCurrencyToCurrency(StringReplace(_ValorCampo,',','.',[rfReplaceAll]));
              _ValorCampo := FormataFloat( _Vlr, 5, 4);
              if _ValorCampo = '0' then
                _ValorCampo := '0.00';
              SetarCampoValor('Aliquota', _ValorCampo);
            end
            else
              RaiseException('Valor inválido para o campo AliquotaISS.');
          end;
        end;

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não',
          'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;
        
        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}
        _ValorCampo := CampoTecno('ResponsavelRetencao');
        case _ValorCampo of
          '', '1', '2': SetarCampoValor('ResponsavelRetencao', _ValorCampo)
          else
            RaiseException('Valor inválido para o campo ResponsavelRetencao. Valores aceitos: 1 – Tomador, 2 – Intermediário');
        end;


        //GovBR2.0: com ponto no ItemListaServico
        _ValorCampo := CampoTecno('CodigoItemListaServico');
        if _ValorCampo <> '' then
        begin
          if AnsiMatchText((Params.Values['Cidade']), ['PATOBRANCO', 'GUARAPUAVAPR', 'BarrinhaSP', 'CATANDUVA', 'CHOPINZINHOPR', 'SOLEDADERS',
                                                       'RIONEGROPR', 'VACARIARS', 'URUGUAIANARS', 'PARAIBADOSULRJ', 'TUPANCIRETARS', 'NAVIRAIMS',
                                                       'COLINASP']) then
          begin
            _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);
            SetarCampoValor('ItemListaServico', _ValorCampo);
          end
          else
          begin
            _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(_ValorCampo, True);
            SetarCampoValor('ItemListaServico', _ValorCampo);
          end;
        end
        else
          RaiseException('Para essa cidade o campo referente a tag ItemListaServico é obrigatório e não deve ser Maior que 5 Caracteres');

        SetarCampoValorTamanho('CodigoCnae', CampoTecno('CodigoCnae'), 7);
        SetarCampoValorTamanho('CodigoTributacaoMunicipio', CampoTecno('CodigoTributacaoMunicipio'), 20);

        // 2000 caracteres
        SetarCampoValorTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000);
        SetarCampoValorTamanhoObrigatorio('CodigoMunicipio', CampoTecno('CodigoCidadePrestacao'), 7);
        SetarCampoValorTamanho('CodigoPais', CampoTecno('CodigoPais'), 4);

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
          SetarCampo('ExigibilidadeIss')
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
          
        SetarCampoValorTamanho('MunicipioIncidencia', CampoTecno('MunicipioIncidencia'), 7);

        //Dados Prestador
        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', RemoveMascara(CampoTecno('CpfCnpjPrestador')));
        SetarCampoValor('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')));
        SetarCampoValorTamanho('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValorTamanho('CpfTomador', _ValorCampo, 11);
          14: SetarCampoValorTamanho ('CnpjTomador', _ValorCampo, 14);
        else
          RaiseException('Valor inválido para o campo CpfCnpjTomador, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;
        
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);
        SetarCampoValorTamanho('RazaoSocialTomador', CampoTecno('RazaoSocialTomador'), 150);
        SetarCampoValorTamanho('EnderecoTomador', CampoTecno('EnderecoTomador'), 125);
        SetarCampoValorTamanho('NumeroTomador', CampoTecno('NumeroTomador'), 10);
        SetarCampoValorTamanho('ComplementoTomador', CampoTecno('ComplementoTomador'), 60);
        SetarCampoValorTamanho('BairroTomador', CampoTecno('BairroTomador'), 60);
        SetarCampoValorTamanho('CodigoMunicipioTomador', CampoTecno('CodigoCidadeTomador'), 7);
        SetarCampoValorTamanho('UfTomador', CampoTecno('UfTomador'), 2);

        if TomadorEstrangeiro then
            SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));

        SetarCampoValorTamanho('CepTomador', RemoveMascara(CampoTecno('CepTomador')), 8);
        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoValorTamanho('EmailTomador', CampoTecno('EmailTomador'), 80);

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        VerificaSeEhNumero('CpfCnpjIntermediario', _ValorCampo);
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;

        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')), 15);
        SetarCampoValorTamanho('RazaoSocialIntermediario', RemoveMascara(CampoTecno('RazaoSocialIntermediario')), 150);

        //Dados Construção Civil
        SetarCampoValorTamanho('CodigoObra', RemoveMascara(CampoTecno('CodigoObra')), 15);
        SetarCampoValorTamanho('Art', RemoveMascara(CampoTecno('Art')), 15);
        
        //Regime Especial Tributação
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if (_ValorCampo <> '') and (_ValorCampo <> '0') then
        begin
          if AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6']) then
            SetarCampo('RegimeEspecialTributacao')
          else
            ExceptionValorInvalidoCampo('RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5, 6.');            
        end;

        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('OptanteSimplesNacional')
        else
          RaiseException('Para essa cidade o campo OptanteSimplesNacional é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');
        
        SetarCampoValorTamanhoObrigatorio('OptanteSimplesNacional', CampoTecno('OptanteSimplesNacional'), 1);

        //IncentivoFiscal
        SetarCampoValorTamanhoObrigatorio('IncentivoFiscal', CampoTecno('IncentivoFiscal'), 1);

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote')
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('IdLote', _ValorCampo);
      end;

      // Item do checklist - deduzir campo versão.
      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)

      else if AnsiMatchText((Params.Values['Cidade']),['REGENTEFEIJO','PATOBRANCO', 'PARAIBADOSULRJ',
      'BARRINHASP','SANTATEREZINHADEITAIPUPR','BASTOSSP','SAOPEDROSP','CLEVELANDIAPR','MATINHOSPR',
      'COSMOPOLISSP','TEODOROSAMPAIOSP', 'CHOPINZINHOPR', 'CATANDUVA', 'RIONEGROPR', 'VACARIARS',
      'SOLEDADERS', 'NAVIRAIMS', 'TUPANCIRETARS', 'COLINASP', 'URUGUAIANARS']) then
        SetarCampoValor('Versao', '2.03')
      else
        SetarCampoValor('Versao', '2.02');


      SetarCampoValorTamanhoObrigatorio('NumeroLote', CampoTecno('NumeroLote'), 15);

      //Dedução campo CpfCnpjRemetente
      _ValorCampo := CampoTecno('CpfCnpjRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString;
      SetarCampoCpfCnpj('Cpf', 'Cnpj', RemoveMascara(_ValorCampo));

      //Dedução campo InscricaoMunicipalRemetente
      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName(
          'InscricaoMunicipalPrestador').AsString;
      SetarCampoValor('InscricaoMunicipal', RemoveMascara(_ValorCampo));

      //Dedução quantidade
      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
