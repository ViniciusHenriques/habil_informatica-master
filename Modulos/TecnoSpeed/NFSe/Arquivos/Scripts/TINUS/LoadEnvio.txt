{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _QtdeRps: Integer;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_LOTE = 'EnviarLoteRpsEnvio';
  DSCIDADE_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\Utils.txt}

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteudo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15);

        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);

        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 - Cupom.');

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8) or (Length(_ValorCampo) = 15)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'YYYY-MM-DD"T"hh:mm:ss');
          SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DDThh:mm:ss');

        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('OptanteSimplesNacional')
        else
          RaiseException('Para essa cidade o campo OptanteSimplesNacional é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');

        _ValorCampo := CampoTecno('IncentivadorCultural');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('IncentivadorCultural')
        else
          RaiseException('Para essa cidade o campo IncentivadorCultural é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');

        _ValorCampo := CampoTecno('SituacaoNota');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampoValor('Status', CampoTecno('SituacaoNota'))
        else
          RaiseException('Para essa cidade o campo SituacaoNota é obrigatorio e deve ser 1 - Normal, ou 2 - Cancelada');

        case StrToIntDef(CampoTecno('TipoTributacao'), -1) of
          0: ; //IGNORADO
          1, 3, 4 : SetarCampoValor('NaturezaOperacao', '3');
          2 : SetarCampoValor('NaturezaOperacao', '4');
          5 : RaiseException('Valor inválido para o campo TipoTributacao. Para ABRASF o TipoTributacao não pode ser '+
                '"5 - Retida". Para isso pode se utilizar "6 - Tributavel dentro do municipio" ou "7 - Tributavel fora do municpio');
          6 : SetarCampoValor('NaturezaOperacao', '1');
          7 : SetarCampoValor('NaturezaOperacao', '2');
        else
          RaiseException('Valor inválido para o campo TipoTributacao. Valores aceitos: 1, 2, 3, 4, 6, 7.');
        end;

        _ValorCampo := CampoTecno('TipoTributacao');
        // NaturezaTributacao: ignorar quando TipoTributacao for diferente de 6 ou 7
        if AnsiMatchText(_ValorCampo, ['6', '7']) then
        begin
          _ValorCampo := CampoTecno('NaturezaTributacao');
          VerificaSeEhNumero('NaturezaTributacao', _ValorCampo);
          case StrToIntDef(CampoTecno('NaturezaTributacao'), -1) of
            0: ;//IGNORADO
            1: ;// IGNORADO
            2, 3: SetarCampoValor('NaturezaOperacao', '1');
            4: SetarCampoValor('NaturezaOperacao', '5');
            5: SetarCampoValor('NaturezaOperacao', '6');
          end;
        end;

        if not AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['', '0']) then
        begin
          if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6'])) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5, 6.');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);

        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3  Cupom.');

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);

        
        case AnsiIndexText(CampoTecno('IssRetido'), ['', '1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0: // Vazio: deduzir do TipoTributacao
          begin
            if CampoTecno('TipoTributacao') = '5' then
              SetarCampoValor('IssRetido', '1')
            else
              SetarCampoValor('IssRetido', '2');
          end;
          1, 2, 3: SetarCampoValor('IssRetido', '1');
          4, 5, 6, 7: SetarCampoValor('IssRetido', '2');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        SetarCampoCurrency('ValorIss', False);

        if CampoTecno('ValorIssRetido') <> '' then
          SetarCampoCurrency('ValorIssRetido', False)
        else
        begin
          // Deduzível (se IssRetido=Sim, utiliza ValorIss)
          if AnsiMatchText(CampoTecno('IssRetido'), [ '1', 'sim', 'true']) then
            SetarCampoValor('ValorIssRetido', CampoCidade('ValorIss'));
        end;

        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('BaseCalculo', False);
        SetarCampoCurrency('ValorLiquidoNfse', False);
        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        // Transformável: para Abrasf, 5% = 0.05
        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _Vlr := StrToFloat(StringReplace(CampoTecno('AliquotaISS'),',','.',[rfReplaceAll])) / 100;  // 5 --> 0,05
          _ValorCampo := FormataFloat(_Vlr, 5, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else if _ValorCampo = '' then
        begin
          RaiseException('Valor inválido para o campo AliquotaISS, o mesmo deve ser informado da seguinte maneira: "5.00" para 5%');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('CodigoItemListaServico'));
        VerificaSeEhNumero('CodigoItemListaServico', _ValorCampo);
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);  // Tinus: sem ponto no ItemListaServico
        SetarCampoObrigatorioValorTamanho('ItemListaServico', 'CodigoItemListaServico', _ValorCampo, 5);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
        VerificaSeEhNumero('CodigoCnae', _ValorCampo);
        SetarCampoValorTamanho('CodigoCnae', _ValorCampo, 7);
        SetarCampoTamanho('CodigoTributacaoMunicipio','CodigoTributacaoMunicipio', 20);

        SetarCampoValorTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000);

        _ValorCampo := CampoTecno('CodigoCidadePrestacao');
        VerificaSeEhNumero('CodigoCidadePrestacao', _ValorCampo);
        if _ValorCampo = '' then
          RaiseException('Valor inválido para o campo CodigoCidadePrestacao')
        else
        begin
          _ValorCampo := ConverterCodigoMunicipio( _ValorCampo, True);
          SetarCampoValorTamanho('CodigoMunicipio', _ValorCampo, 7);
        end;

        if CampoTecno('CpfCnpjPrestador') <> '' then
        begin
          _ValorCampo := AdicionarZerosEsquerda(RemoveMascara(CampoTecno('CpfCnpjPrestador')),14);
          SetarCampoValor('CnpjPrestador', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o Campo CpfCnpjPrestador é Obrigatório.');

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
        VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
        SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', _ValorCampo, 15);

        if CampoTecno('CpfCnpjTomador') <> '' then
        begin
          _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
          case Length(_ValorCampo) of
            0 : { Campo vazio, ignorar };
            11: SetarCampoValor('CpfTomador', _ValorCampo);
            14: SetarCampoValor('CnpjTomador', _ValorCampo);
          else
            RaiseException('Valor inválido para o campo CpfCnpjTomador, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
          end;
        end;

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 115);
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        SetarCampoValorTamanho('InscricaoMunicipalTomador', _ValorCampo, 15);
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);

        if CampoTecno('CodigoCidadeTomador') <> '' then
        begin
          VerificaSeEhNumero('CodigoCidadeTomador', CampoTecno('CodigoCidadeTomador'));
          _ValorCampo := ConverterCodigoMunicipio(CampoTecno('CodigoCidadeTomador'), True);
          SetarCampoValorTamanho('CodigoMunicipioTomador', _ValorCampo, 7);

          if CampoTecno('UfTomador') <> '' then
            SetarCampoTamanho('UfTomador', 'UfTomador', 2)
          else
          begin
            _ValorCampo := BuscarInfoCidade('CodIBGE', CampoCidade('CodigoMunicipioTomador'), 'UF');
            SetarCampoValorTamanho('UfTomador', _ValorCampo, 2);
          end;
        end;

        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoValorTamanho('CepTomador', _ValorCampo, 8);
        
        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoTamanho('EmailTomador', 'EmailTomador', 80);

        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 115);
        
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario'));
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', _ValorCampo, 15);
       
        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);

        _DsCidadeAtual.Post;

        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padro TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // IdLote  deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote')
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('IdLote', _ValorCampo);
      end;

      _ValorCampo := CampoTecno('NumeroLote');
      VerificaSeEhNumero('NumeroLote', _ValorCampo);
      SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', _ValorCampo, 15);

      VerificaSeEhNumero('CpfCnpjRemetente', RemoveMascara(CampoTecno('CpfCnpjRemetente')));
      if CampoTecno('CpfCnpjRemetente') <> '' then
        SetarCampoValorTamanho('Cnpj', AdicionarZerosEsquerda(RemoveMascara(CampoTecno('CpfCnpjRemetente')),14), 14)
      else
        SetarCampoValor('Cnpj', AdicionarZerosEsquerda(RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString),14));

      _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalRemetente'));
      VerificaSeEhNumero('InscricaoMunicipalRemetente', _ValorCampo);
      if _ValorCampo = '' then
      begin
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString
         SetarCampoValorTamanho('InscricaoMunicipal', _ValorCampo, 15);
      end
      else
        SetarCampoValorTamanho('InscricaoMunicipal', _ValorCampo, 15);


      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.
