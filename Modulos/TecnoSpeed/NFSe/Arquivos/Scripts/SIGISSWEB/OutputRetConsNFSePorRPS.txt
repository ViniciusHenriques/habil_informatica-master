{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _ListFields : TStringList;
  _Status, _Motivo, _Xml, _XmlNota, _DataAutorizacao, _DataCancelamento: string;
  
{$I ..\Comuns\Utils.txt}
{$I ..\Comuns\Comuns.txt}

  function RetornouDadosNota(const aXML:string): Boolean;
  Var
    _Value : string;
  begin
    Result := (xmlSelectNodeValue(aXml, '//*[local-name()="ws_003_out_status_retorno"]', _Value)) and
      (_Value <> '');
  end;
  
  function CreateFieldsResponseNotaSigIssWeb: TStringList;
  var
    _i: Integer;
  begin
    result := TStringList.Create;    
    result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);    
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;
  
  function GetChaveCancelamento(const aXML: string): String;
  begin
    Result := GetValueTag('ws_003_out_nfse_numero', aXML) + '_' + GetValueTag('ws_003_out_nfse_cod_atividade', aXML) + '_' + GetValueTag('ws_003_out_nfse_codigo_validacao', aXML) + '_' + GetValueTag('ws_003_out_nfse_mes_p_a', aXML) + '_' + GetValueTag('ws_003_out_nfse_ano_p_a', aXML);
  end;
  
  function GetStatusNota : string;
  var
    _Value : string;
  begin         
    if trim(GetValueTag('numero_nf', _Xml)) <> '' then
      Result := 'SUCESSO'
    else
      Result := 'ERRO';
  end;
  
  function RetirarCaracteresXML(const aXML: string) : String;
  begin
    Result := StringReplace(aXML, '#xD;', '#xD', [RfReplaceAll]);    
    Result := StringReplace(Result, '#xd;', '#xd', [RfReplaceAll]);    
    Result := StringReplace(Result, '#xac;', '#xac', [RfReplaceAll]);
    Result := StringReplace(Result, ';', '\delimiter', [rfReplaceAll]);    
  end;
  
  function GetCodigo(const aXML: string): String;
  begin    
      Result := GetValueTag('Codigo', aXml)
  end;

  function GetMotivoNota(const aXML: string): String;
  var
    _Value : String;
  begin
    xmlSelectNodeValue(_Xml, '//*[local-name()="Mensagem"]',  _Value);
    Result := GetCodigo(_Xml) + '-' + _Value;
  end;
  
  function GetSituacaoNota(const aXml: string): string;
  Var
    _Situacao: string;
  begin
    _Situacao := GetValueTag('cancelada', aXml);    
    if _Situacao = 'N' then
      Result := 'AUTORIZADA'
    else
      Result := 'CANCELADA';
  end;

begin
  Output := '';
  Progress('Adicionando valores aos campos');  
  _Xml := Params.Values['XML'];  
  if _Xml = '' then
    _Xml := Params.Values['ERRO'];
  _Xml := StringReplace(_Xml, ';', '\delimiter', [rfReplaceAll]);

  _Status := GetStatusNota;
  _Motivo := GetMotivoNota(_Xml);

  if _Status = 'ERRO' then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO', _ListFields);
      if _Motivo = '' then
        AddValueListFields('Motivo', 'Consulta de NFSe não retornou nota, verifique os dados.', _ListFields)
      else
        AddValueListFields('Motivo', _Motivo, _ListFields);
      Output := FormatLineResult(_ListFields);
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    _ListFields := CreateFieldsResponseNotaSigIssWeb;
         
    if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
    begin
      try
        if _Status = 'SUCESSO' then
        begin
          AddValueListFields('Motivo', '', _ListFields);
          AddValueListFields('Status', _Status, _ListFields);
          AddValueListFields('Cnpj', GetValueTag('cnpj_cpf_prestador', _Xml), _ListFields);
          AddValueListFields('InscMunicipal', GetValueTag('im_prestador', _Xml), _ListFields);
          AddValueListFields('SerieRps', GetValueTag('serie_rps', _Xml), _ListFields);
          AddValueListFields('NumeroRps', GetValueTag('rps', _Xml), _ListFields);
          AddValueListFields('NumeroNFSe', GetValueTag('numero_nf', _Xml), _ListFields);
          AddValueListFields('DataEmissaoNFSe', GetValueTag('data_emissao', _Xml), _ListFields);

          _DataAutorizacao := FormatAnyDateTime(GetValueTag('data_emissao', _Xml), 'yyyy-mm-dd');
          AddValueListFields('DataAutorizacao', _DataAutorizacao, _ListFields);

          AddValueListFields('CodVerificacao', GetValueTag('codigo', _Xml), _ListFields);
          AddValueListFields('Situacao',GetSituacaoNota(_Xml), _ListFields);

          if (Trim(GetValueTag('data_canc', _Xml)) <> '' ) then
            _DataCancelamento := FormatAnyDateTime(GetValueTag('data_canc', _Xml), 'yyyy-mm-dd');
          AddValueListFields('DataCancelamento', _DataCancelamento, _ListFields);

          AddValueListFields('ChaveCancelamento', GetValueTag('numero_nf', _Xml) + '_' + GetValueTag('serie', _Xml), _ListFields);
          AddValueListFields('Tipo', '', _ListFields);
          AddValueListFields('Xml', _Xml, _ListFields);
        end;
        if (Params.Values['DelimitadorDaLinha'] = '') then
          Output := FormatLineResult(_ListFields) + #13#10
        else
          Output := FormatLineResult(_ListFields) + Params.Values['DelimitadorDaLinha'];
          
      Finally
        _ListFields.Free;
      end;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.