{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _ValorCampoRPS: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _DsServicoAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _QtdeRps: Integer;
  _NumLote, _Mes, _Ano: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_LOTE = 'NFSE';
  DSCIDADE_NOTA = 'NOTA';
  DSCIDADE_SERV = 'SERVICO';
  DSCIDADE_MATERIAL = 'MATERIAL';
  DSTECNO_SERVICO = 'Servico';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasetsItens.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\SetarCamposMunicipioDS.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\Utils.TXT}

  function FormataData(aData : string): string;
  var
    _sl: TStringList;
    _Aux: string;
  begin
    if aData <> '' then
    begin
      Delete(aData, 11, Length(aData)); // formato: dd/mm/aaaa hh:mm:ss
      if Pos('-', aData) > 0 then // formato: aaaa-mm-dd
      begin
        _Aux := StringReplace(aData, '-', ' ',[rfReplaceAll]);
        _Aux := StringReplace(_Aux, '-', ' ',[rfReplaceAll]);
        try
          _sl := TStringList.Create;
          _sl.CommaText := _Aux;
          Result := _sl[2] + '/' + _sl[1] + '/' + _sl[0];
        finally
          _sl.Free;
        end;
      end
      else if Pos('/', aData) > 0 then // formato: dd/mm/aaaa
        result := aData
      else
        RaiseException('Valor inválido para campo DataEmissao. Formatos aceitos: dd/mm/aaaa hh:mm:ss, dd/mm/aaaa, aaaa-mm-dd.');
    end else
      //Result := '';
      RaiseException('Campo DataEmissao é obrigatório.');
  end;

  function GetCompetencia(aCompetencia, aCampo : string): string;
  var
    _sl: TStringList;
    _Aux: string;
    _Tamanho: Integer;
  begin
    if aCompetencia <> '' then
    begin
      _Aux := StringReplace(aCompetencia, '-', ' ',[rfReplaceAll]);
      _Aux := StringReplace(_Aux, '/', ' ',[rfReplaceAll]);
      try
        _sl := TStringList.Create;
        _sl.CommaText := _Aux;

        _Tamanho := Length(_sl[0]);

        if aCampo = 'ano' then
        begin
          if _Tamanho = 4 then
            Result := _sl[0]
          else
            Result := _sl[1];
        end else if aCampo = 'mes' then
        begin
          if _Tamanho = 4 then
            Result := _sl[1]
          else
            Result := _sl[0];
        end else
          Result := '';

        Result := Trim(Result);

      finally
        _sl.Free;
      end;
    end else
      Result := '';
  end;

  procedure SetarCampoValorServico(const aCampo, aValor: string);
  begin
    Campo(_DsServicoAtual, aCampo).AsString := aValor;
  end;

  function TomadorEstrangeiro: boolean;
  begin
    Result := AnsiIndexText(CampoTecno('PaisTomador'), ['', 'Brasil', 'BRASIL', 'BR', '1058', '01058']) = -1;
  end;

  procedure ValidaTamanhoMaximo(const aValor : String; const aQtd: Integer);
  begin
   if length(aValor) > aQtd then
     RaiseException('Valor inválido para o campo: ' + aValor + ', Informe no máximo ' + IntToStr(aQtd) + ' caracteres.');
  end;

  procedure SetarCampoCurrencyValorServicoISSONLINE(const aCampo, aValor: string; const SetarSeZero: boolean);
  var 
    _Valor: Currency;
    _Val : String;

  begin
    if aValor <> '' then
    begin
      _Val := StringReplace(aValor, '.', '', [rfReplaceAll]);
      _Val := StringReplace(_Val, ',', '', [rfReplaceAll]);
      VerificaSeEhNumero(aCampo, _Val);
      ValidaTamanhoMaximo(aValor, 19);
    end;
    _Valor := AnyCurrencyToCurrency(aValor);
    if (_Valor <> 0) or SetarSeZero then
      Campo(_DsServicoAtual, aCampo).AsString := CurrencyToXsdCurrency(_Valor);
  end;

  procedure VerificaSeEhVazio(const aValor, aCampo: String)  ;
  begin
    if trim(aValor) = '' then
      RaiseException('O campo ' + aCampo + ' é obrigatório.');
  end;

  procedure VerificaSeEhVazioServico(const aValor, aCampo: String)  ;
  begin
    if trim(aValor) = '' then
      RaiseException('O campo ' + aCampo + ' é obrigatório para cada serviço.');
  end;  

  procedure VerificaSeEhMaiorQueZero(const aValor, aCampo: String);
  var 
    _Val : String;
  begin
    if trim(aValor) <> '' then
    begin
      _Val := StringReplace(aValor, '.', '', [rfReplaceAll]);
      _Val := StringReplace(_Val, ',', '', [rfReplaceAll]);
      VerificaSeEhNumero(aCampo, _Val);
      if length(_Val) <= 0 then
        RaiseException('O campo ' + aCampo + ' é obrigatório e deve ser maior que Zero.');
    end;
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasetsItens;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade

      // número do lote utilizado em todas as notas
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);
      _DsServicoAtual := Datasets.GetDataSetByName(DSCIDADE_SERV);
      _NumLote := CampoTecno('NumeroLote');

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        if CampoTecno('Competencia') <> '' then
        begin
          _Mes := GetCompetencia(CampoTecno('Competencia'), 'mes');
          _Ano := GetCompetencia(CampoTecno('Competencia'), 'ano');
        end
        else
          RaiseException('Valor inválido para o campo Competencia.');

        //De acordo com o manual, o tamanho maximo do campo RPS deve ser 14.
        _ValorCampo := CampoTecno('NumeroRps');
        if _ValorCampo <> '' then
        begin
          if (Pos('-', _ValorCampo) = 0) and (Length(_ValorCampo) <= 14) then
          begin
            try
              FmtStr(_ValorCampoRPS,'%.12d', [StrToint64(CampoTecno('NumeroRps'))]);
              _ValorCampoRPS := FormatMaskText('AAAA-AAAA-AAAA;0;0', _ValorCampoRPS);
              SetarCampoValor('RPS', _ValorCampoRPS);
            except
              RaiseException('Valor inválido para o campo NumeroRPS.');
            end;
          end
          else
            SetarCampoValor('RPS', CampoTecno('NumeroRps'));
        end;

        VerificaSeEhNumero('NumeroLote',_NumLote);
        if _NumLote <> '' then
        begin
          SetarCampoValorTamanho('LOTE', _NumLote, 9);
          SetarCampoValorTamanho('SEQUENCIA', _NumLote, 9);
        end
        else
          RaiseException('O campo "NumeroLote" é obrigatório e deve conter até 9 caracteres.');
         
        _ValorCampo := FormataData(CampoTecno('DataEmissao'));
        SetarCampoValor('DATAEMISSAO', _ValorCampo);
        SetarCampoValor('HORAEMISSAO', '00:00:01');

        if (CampoTecno('TipoTributacao') <> '') and (CampoTecno('TipoTributacao') <> '0') then
        begin
          _ValorCampo := CampoTecno('TipoTributacao');
          case _ValorCampo of
            '2': ;
            '3', '6': SetarCampoValor('LOCAL', 'D');
            '7':
            begin
              SetarCampoValor('LOCAL', 'F');
              _ValorCampo := CampoTecno('CodigoCidadePrestacao');
              SetarCampoValor('UFFORA', BuscarInfoCidade('CodIBGE', _ValorCampo, 'UF'));
              SetarCampoValorTamanho('MUNICIPIOFORA', _ValorCampo, 9);
            end;
          else
            RaiseException('Valor inválido para o campo TipoTributacao. Valores aceitos: 3, 6, 7.');
          end;
        end;

        if CampoTecno('SituacaoNota') = '1' then
          SetarCampoValor('SITUACAO', '1')
        else if CampoTecno('SituacaoNota') = '2' then
          SetarCampoValor('SITUACAO', '3')
        else if CampoTecno('NaturezaTributacao') = '2' then
          SetarCampoValor('SITUACAO', '4')
        else if ((CampoTecno('OptanteSimplesNacional') = '1') or (CampoTecno('NaturezaTributacao') = '1')) and
          (CampoTecno('TipoTributacao') = '3') then
          SetarCampoValor('SITUACAO', '5')
        else if (CampoTecno('OptanteSimplesNacional') = '1') or (CampoTecno('NaturezaTributacao') = '1') then
          SetarCampoValor('SITUACAO', '2')
        else
          SetarCampoValor('SITUACAO', '1');

        // 1 = Sim
        // 2 = Não

        // Valores
        SetarCampoCurrencyValor('ValorDeducoes', 'DEDUCAO', true);
        SetarCampoCurrencyValor('ValorPis', 'PIS', true);
        SetarCampoCurrencyValor('ValorCofins', 'COFINS', true);
        SetarCampoCurrencyValor('ValorInss', 'INSS', true);
        SetarCampoCurrencyValor('ValorIr', 'IR', true);
        SetarCampoCurrencyValor('ValorCsll', 'CSLL', true);
        SetarCampoCurrencyValor('OutrasRetencoes', 'OUTRASRETENCOES', true);

          // Transformável: 5% = 5 ou 0,05
        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _Vlr := StrToFloat(StringReplace(CampoTecno('AliquotaISS'),',','.',[rfReplaceAll]));
          _ValorCampo := FormataFloat( _Vlr, 5, 4);
          SetarCampoCurrencyValor('AliquotaISS', 'ALIQUOTAAPLICADA', true);
        end
        else
          RaiseException('Valor inválido para o campo AliquotaISS.');

        _ValorCampo := RemoverAcentos(CampoTecno('IssRetido'));
        case UpperCase(_ValorCampo) of
          '1', 'SIM', 'TRUE': SetarCampoValor('RETIDO', 'S');
          '2', 'NAO', 'FALSE': SetarCampoValor('RETIDO', 'N');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        if Trim(_ValorCampo) = 'S' then
          SetarCampoCurrencyValor('ValorIssRetido', 'IMPOSTO', true)
        else
          SetarCampoCurrencyValor('ValorIss', 'IMPOSTO', true);

        SetarCampoCurrencyValor('ValorIssRetido', 'RETENCAO', true)

        if CampoTecno('OutrasInformacoes') <> '' then
          SetarCampoTamanho('OutrasInformacoes', 'OBSERVACAO', 1000)
        else if CampoTecno('DescricaoRPS') <> '' then
          SetarCampoValorTamanho('OBSERVACAO', CampoTecno('DescricaoRPS'), 1000)
        else
          SetarCampoValorTamanho('OBSERVACAO', CampoTecno('DiscriminacaoServico'), 1000);

        if (AnsiUpperCase(Params.Values['Cidade']) = 'VOTORANTIMSP') and (Length(CampoTecno('CodigoCnae')) = 4) then
          SetarCampoValor('ATIVIDADE', FormatarCodigoItemListaServico(CampoTecno('CodigoCnae'), True))
        else
          SetarCampoValorTamanho('ATIVIDADE', CampoTecno('CodigoCnae'), 10);

        // Tomador
        SetarCampoValorTamanho('CPFCNPJ', RemoveMascara(CampoTecno('CpfCnpjTomador')), 20);
        SetarCampoValor('NOMERAZAO', CampoTecno('RazaoSocialTomador'));
        SetarCampoValor('NOMEFANTASIA', CampoTecno('RazaoSocialTomador'));
        SetarCampoValorTamanho('MUNICIPIO', CampoTecno('CodigoCidadeTomador'), 9);
        SetarCampoValor('BAIRRO', CampoTecno('BairroTomador'));
        SetarCampoValorTamanho('CEP', RemoveMascara(CampoTecno('CepTomador')), 8);

        _ValorCampo := UpperCase(CampoTecno('TipoLogradouroTomador'));
        case ansiIndexText(_ValorCampo, ['ACESSO', 'AEROPORTO', 'ALAMEDA', 'ANEL VIARIO','APARTAMENTO', 'AVENIDA', 'BAIRRO', 'BECO','BLOCO','CAMINHO', 'CHACARA', 'CONDOMINIO', 'CONVERSAO', 'DISTRITO', 'ESCADINHA','ESTAÇÃO', 'ESTANCIA', 'ESTRADA','FAZENDA','FORTALEZA','GALERIA','LADEIRA','LARGO', 'LOTEAMENTO', 'MARGINAL', 'PRAÇA', 'PARQUE','PASSAGEM', 'PASSEIO', 'PRAIA','QUADRA','QUILÔMETRO','QUINTA','RODOVIA','RUA', 'SITIO', 'SUPER QUADRA','TRAVESSA', 'VIA', 'VIADUTO', 'VIELA', 'VILA']) of
          0: SetarCampoValor('PREFIXO', 'ACES');
          1: SetarCampoValor('PREFIXO', 'AER');
          2: SetarCampoValor('PREFIXO', 'ALA');
          3: SetarCampoValor('PREFIXO', 'ANEL');
          4: SetarCampoValor('PREFIXO', 'AP');
          5: SetarCampoValor('PREFIXO', 'AVN');
          6: SetarCampoValor('PREFIXO', 'BAI');
          7: SetarCampoValor('PREFIXO', 'BECO');
          8: SetarCampoValor('PREFIXO', 'BL');
          9: SetarCampoValor('PREFIXO', 'CAM');
          10: SetarCampoValor('PREFIXO', 'CHAC');
          11: SetarCampoValor('PREFIXO', 'COND');
          12: SetarCampoValor('PREFIXO', 'CONV');
          13: SetarCampoValor('PREFIXO', 'DIST');
          14: SetarCampoValor('PREFIXO', 'ESCD');
          15: SetarCampoValor('PREFIXO', 'EST');
          16: SetarCampoValor('PREFIXO', 'ESTAN');
          17: SetarCampoValor('PREFIXO', 'EST');
          18: SetarCampoValor('PREFIXO', 'FAZ');
          19: SetarCampoValor('PREFIXO', 'FORT');
          20: SetarCampoValor('PREFIXO', 'GL');
          21: SetarCampoValor('PREFIXO', 'LAD');
          22: SetarCampoValor('PREFIXO', 'LARGO');
          23: SetarCampoValor('PREFIXO', 'LOT');
          24: SetarCampoValor('PREFIXO', 'MARG');
          25: SetarCampoValor('PREFIXO', 'PRC');
          26: SetarCampoValor('PREFIXO', 'PARQ');
          27: SetarCampoValor('PREFIXO', 'PAS');
          28: SetarCampoValor('PREFIXO', 'PASSE');  
          29: SetarCampoValor('PREFIXO', 'PRAIA');
          30: SetarCampoValor('PREFIXO', 'QUAD');
          31: SetarCampoValor('PREFIXO', 'KM');
          32: SetarCampoValor('PREFIXO', 'QTA');
          33: SetarCampoValor('PREFIXO', 'ROD');
          34: SetarCampoValor('PREFIXO', 'RUA');
          35: SetarCampoValor('PREFIXO', 'SIT');
          36: SetarCampoValor('PREFIXO', 'SQD');
          37: SetarCampoValor('PREFIXO', 'TVA');
          38: SetarCampoValor('PREFIXO', 'VIA');
          39: SetarCampoValor('PREFIXO', 'VD');
          40: SetarCampoValor('PREFIXO', 'VIEL');
          41: SetarCampoValor('PREFIXO', 'VLA')
        else
          SetarCampoValor('PREFIXO', _ValorCampo);
        end;

        SetarCampoValor('LOGRADOURO', CampoTecno('EnderecoTomador'));
        
        if trim(CampoTecno('ComplementoTomador')) <> '' then        
          SetarCampoValor('COMPLEMENTO', CampoTecno('ComplementoTomador'))
        else
          SetarCampoValor('COMPLEMENTO', '.'); // campo de preenchimento obrigatorio.
          
        SetarCampoValorTamanho('NUMERO', CampoTecno('NumeroTomador'), 10);
        SetarCampoValorTamanho('EMAIL', CampoTecno('EmailTomador'), 200);
        SetarCampoValorTamanho('OBRA', CampoTecno('CodigoObra'), 9);

        // Dataset Serviço
        _DsServicoAtual.Edit;
        VerificaSeEhVazio(CampoTecno('DiscriminacaoServico'), 'DiscriminacaoServico');
        SetarCampoValorServico('DESCRICAO', CampoTecno('DiscriminacaoServico'));

        if trim(CampoTecno('ValorUnitarioServico')) <> '' then
        begin
          VerificaSeEhMaiorQueZero(CampoTecno('ValorUnitarioServico'), 'ValorUnitarioServico');
          SetarCampoCurrencyValorServicoISSONLINE('VALORUNIT', StringReplace(CampoTecno('ValorUnitarioServico'),',','.',[rfReplaceAll]), True);
        end
        else
        begin
          VerificaSeEhVazio(CampoTecno('ValorServicos'), 'ValorServicos');
          VerificaSeEhMaiorQueZero(CampoTecno('ValorServicos'), 'ValorServicos');
          SetarCampoCurrencyValorServicoISSONLINE('VALORUNIT', StringReplace(CampoTecno('ValorServicos'),',','.',[rfReplaceAll]), True);
        end;
        
        if CampoTecno('QuantidadeServicos') = '' then
          SetarCampoValorServico('QUANTIDADE', '1')
        else
        begin
          VerificaSeEhNumero('QuantidadeServicos', CampoTecno('QuantidadeServicos'));
          SetarCampoValorServico('QUANTIDADE', CampoTecno('QuantidadeServicos'));
        end;

        SetarCampoCurrencyValorServicoISSONLINE('DESCONTO', CampoTecno('DescontoIncondicionado'), True);
        _DsServicoAtual.Post;

        { SERVICO INCLUIRSERVICO }
        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_SERVICO);        
        _DsTecnoAtual.First;
        while not _DsTecnoAtual.Eof do
        begin
          _DsServicoAtual.Append;
          VerificaSeEhVazioServico(CampoTecno('DiscriminacaoServico'), 'DiscriminacaoServico');
          SetarCampoValorServico('DESCRICAO', CampoTecno('DiscriminacaoServico'));
          
          if trim(CampoTecno('ValorUnitarioServico')) <> '' then
          begin
            VerificaSeEhMaiorQueZero(CampoTecno('ValorUnitarioServico'), 'ValorUnitarioServico');
            SetarCampoCurrencyValorServicoISSONLINE('VALORUNIT', StringReplace(CampoTecno('ValorUnitarioServico'),',','.',[rfReplaceAll]), True);
          end
          else
          begin
            VerificaSeEhVazio(CampoTecno('ValorServicos'), 'ValorServicos');
            VerificaSeEhMaiorQueZero(CampoTecno('ValorServicos'), 'ValorServicos');
            SetarCampoCurrencyValorServicoISSONLINE('VALORUNIT', StringReplace(CampoTecno('ValorServicos'),',','.',[rfReplaceAll]), True);
          end;
          
          if CampoTecno('QuantidadeServicos') = '' then
            SetarCampoValorServico('QUANTIDADE', '1')
          else
          begin
            VerificaSeEhNumero('QuantidadeServicos', CampoTecno('QuantidadeServicos'));
            SetarCampoValorServico('QUANTIDADE', CampoTecno('QuantidadeServicos'));
          end;

          _DsServicoAtual.Post; 
          _DsTecnoAtual.Next;
        end;        
        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
        _DsTecnoAtual.Next;

        if TomadorEstrangeiro then
          SetarCampoValor('DENTROPAIS', 'N')
        else
          SetarCampoValor('DENTROPAIS', 'S');

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
        
      end;

      SetarCamposMunicipioDS([DSCIDADE_NOTA, DSCIDADE_SERV, DSCIDADE_MATERIAL]);

      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      SetarCampoValor('MESCOMP', _Mes);
      SetarCampoValor('ANOCOMP', _Ano);

      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
      SetarCampoValorTamanho('INSCRICAO', RemoveMascara(_ValorCampo), 9);

      _ValorCampo := CampoTecno('Versao');
      if _ValorCampo = '' then
        _ValorCampo := '1.00';
      SetarCampoValor('VERSAO', _ValorCampo);

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.