{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _QtdeRps: Integer;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_LOTE = 'EnviarLoteRpsEnvio';
  DSCIDADE_NOTA = 'GerarNfseEnvio';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\Comuns.txt}

begin
  Progress('Criando XSDDataset');
  CriarDatasets;
  _tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;
    _DsTecnoAtual := nil;
    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);
      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps', 'NumeroRps', 15);

        SetarCampoObrigatorioTamanho('SerieRps', 'SerieRps', 5);

        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8) or (Length(_ValorCampo) = 15)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'YYYY-MM-DD"T"hh:mm:ss');
          SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DDThh:mm:ss');

        _ValorCampo := CampoTecno('SituacaoNota');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampoValor('Status', CampoTecno('SituacaoNota'))
        else
          RaiseException('Para essa cidade o campo SituacaoNota é obrigatorio e deve ser 1 - Normal, ou 2 - Cancelada');
        SetarCampo('NumeroRpsSubstituido');
        SetarCampo('SerieRpsSubstituido');
        SetarCampo('TipoRpsSubstituido');

        //NÃO DEVE SER ENVIADO
        //CampoTecno('Competencia')
        Campo(_DsCidadeAtual, 'ValorServicos').AsString := StringREplace(Campo(_DsCidadeAtual, 'ValorServicos').AsString, ',', '.', []);
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('OutrasRetencoes', False);

        //NÃO DEVE SER ENVIADO
        {SetarCampoCurrency('ValorIss', False);
        Campo(_DsCidadeAtual, 'ValorIss').AsString := Campo(_DsCidadeAtual, 'ValorIss').AsString}

        {A tag alíquota será obrigatória apenas quando o Prestador é enquadrado no Simples Nacional.
        Nas demais situações essa informação não é obrigatória e será gerada pelo sistema(Retorno do Envio).}
        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.', [rfReplaceAll]);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          RaiseException('Valor inválido para o campo AliquotaISS.');

        SetarCampoCurrency('DescontoIncondicionado', False);

        //NÃO DEVE SER ENVIADO
        {SetarCampoCurrency('DescontoCondicionado', False);}

        //NÃO DEVE SER ENVIADO
        {case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;}

        //NÃO DEVE SER ENVIADO
        //SetarCampo('ResponsavelRetencao');

        //NÃO DEVE SER ENVIADO
        {_ValorCampo := CampoTecno('CodigoItemListaServico');
        SetarCampoValor('ItemListaServico', _ValorCampo);}

        //NÃO DEVE SER ENVIADO
        //SetarCampo('CodigoCnae');
        VerificaSeEhNumero('CodigoTributacaoMunicipio', CampoTecno('CodigoTributacaoMunicipio'));
        SetarCampoTamanho('CodigoTributacaoMunicipio', 'CodigoTributacaoMunicipio', 20);

        SetarCampoObrigatorioTamanho('DiscriminacaoServico', 'Discriminacao', 2000);

        {A tabela de municípios a ser utilizada é a mesma em uso atualmente na DMS (Declaração Mensal de Serviços),
         REST (Relação de Serviços de Terceiros) e MAPA BANCÁRIO na Prefeitura de Goiânia.
         A tabela de municípios contém diferenças em relação à tabela de municípios do IBGE.}
        _ValorCampo := CampoTecno('CodigoCidadePrestacao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := BuscarInfoCidade('CodIBGE', _ValorCampo, 'CodDMS');
            SetarCampoValor('CodigoMunicipio', _ValorCampo);
          except
            SetarCampoValor('CodigoMunicipio', _ValorCampo);
          end;
        end;

        if _ValorCampo = '9999999' then
          SetarCampoValor('CodigoPais', CampoTecno('CodigoPais'));

        //NÃO DEVE SER ENVIADO
        //SetarCampo('ExigibilidadeISS')

        //NÃO DEVE SER ENVIADO
        //SetarCampo('MunicipioIncidencia')

        if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6'])) then
          SetarCampo('RegimeEspecialTributacao');

        //NÃO DEVE SER ENVIADO
        //SetarCampo('OptanteSimplesNacional');

        //NÃO DEVE SER ENVIADO
        //SetarCampo('IncentivoFiscal');

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        if _ValorCampo <> '' then
        begin
          case Length(_ValorCampo) of
            11:
              SetarCampoValor('CpfPrestador', _ValorCampo);
            14:
              SetarCampoValor('CnpjPrestador', _ValorCampo);
          end;
        end
        else
          RaiseException('Campo de preenchimento obrigatório não preenchido: CpfCnpjPrestador');

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
        if _ValorCampo <> '' then
          SetarCampoValor('InscricaoMunicipalPrestador', _ValorCampo)
        else
          RaiseException('Campo de preenchimento obrigatório não preenchido: InscricaoMunicipalPrestador');

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        case Length(_ValorCampo) of
          11:
            SetarCampoValor('CpfTomador', _ValorCampo);
          14:
            SetarCampoValor('CnpjTomador', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 150);
        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);

        {A tabela de municípios a ser utilizada é a mesma em uso atualmente na DMS (Declaração Mensal de Serviços),
         REST (Relação de Serviços de Terceiros) e MAPA BANCÁRIO na Prefeitura de Goiânia.
         A tabela de municípios contém diferenças em relação à tabela de municípios do IBGE.}
        _ValorCampo := CampoTecno('CodigoCidadeTomador');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := BuscarInfoCidade('CodIBGE', _ValorCampo, 'CodDMS');
            SetarCampoValor('CodigoMunicipioTomador', _ValorCampo);
          except
            SetarCampoValor('CodigoMunicipioTomador', _ValorCampo);
          end;
        end;
        SetarCampoTamanho('UfTomador', 'UfTomador', 2);
        _ValorCampo := CampoTecno('PaisTomador');
        case AnsiIndexText(_ValorCampo, ['1058', '01058', 'BRASIL', 'brasil', 'Brasil']) of
          0, 1, 2, 3, 4:
            SetarCampoValor('CodigoPaisTomador', '1058')        else
          SetarCampoValor('CodigoPaisTomador', _ValorCampo);
        end;
        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoTamanho('CepTomador', 'CepTomador', 8);
        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        _ValorCampo := StringReplace(CampoTecno('EmailTomador'), ' ', '', [rfReplaceAll]);
        SetarCampoValorTamanho('EmailTomador', _ValorCampo, 80);
        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0: { Campo vazio, ignorar }
            ;
          11:
            SetarCampoValor('CpfIntermediario', _ValorCampo);
          14:
            SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario');
        end;

        SetarCampoValor('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')));
        SetarCampo('RazaoSocialIntermediario');

        SetarCampo('CodigoObra');
        SetarCampo('Art');

        _DsCidadeAtual.Post;

        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipio(false);
    end
    else
    begin
      Datasets.LoadFromTx2Content(_tx2.Text);
    end;
  finally
    _tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.
