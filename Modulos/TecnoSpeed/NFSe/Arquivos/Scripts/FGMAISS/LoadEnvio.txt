{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo : string;
  _ValorCampoVal, _ValorCampoValtrib : string;
  _NomeCampo: string;
  _inicio: Integer;
  _linha: string;
  _PastaTecnoNFSe: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'EnvNfe';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\Utils.TXT}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}

  procedure ExceptionValorInvalidoCampo(const aNomeCampo: string);
  begin
    RaiseException('Valor inválido para o campo: ' + aNomeCampo);
  end;

  procedure SetarCampoCurrencyFGMAISS(const aCampoTecno, aCampo: string);
  var
    _ValorCur: Currency;
    _ValorStr: string;
  begin
    if CampoTecno(aCampoTecno) <> '' then
    begin
      try
        _ValorCur := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
        _ValorStr := CurrencyToXsdCurrency(_ValorCur);
      except
        RaiseException('Não foi possível realizar a conversão do campo: ' + aCampoTecno);
      end;

      _ValorStr := StringReplace(_ValorStr, ',', '.',[]);
      Campo(_DsCidadeAtual, aCampo).AsString := _ValorStr;
    end;
  end;

  procedure SetarAliquota(const aCampoAliquota, aValor: string);
  begin
    if DivideCampoPorcentagem(CampoTecno(aValor)) then
      SetarCampoCurrencyFGMAISS(aValor, aCampoAliquota)
    else
      RaiseException('Valor inválido para o campo ' + aValor + '.');
  end;

  function FormataCamposLote(const aValor: string) : string;
  begin
    Result := StringReplace(aValor, ',', '.', []);
  end;

  function FormataCnpj(const aCNPJ: string): String;
  var
    _cnpjFormatado : String;
  begin
    _cnpjFormatado := Copy(aCNPJ,1,2) + '.' + Copy(aCNPJ,3,3) + '.' + Copy(aCNPJ,6,3) + '/' +
              Copy(aCNPJ,9,4) + '-' + Copy(aCNPJ,13,2);
    Result := _cnpjFormatado;
  end;

  function FormataCpf(const aCPF: string): String;
  var
    _cpfFormatado : String;
  begin
    _cpfFormatado := Copy(aCPF,1,3) + '.' + Copy(aCPF,4,3) + '.' + Copy(aCPF,7,3) + '-' +
              Copy(aCPF,10,2);
    Result := _cpfFormatado;
  end;

  function RetiraFormatacaoCpfCnpjCampo(const aCampo: String) : String;
  var
    _CpfCnpjSemFormatcao : String;
  begin
    _CpfCnpjSemFormatcao := StringReplace(aCampo, '.', '', [rfReplaceAll]);
    _CpfCnpjSemFormatcao := StringReplace(_CpfCnpjSemFormatcao, '-', '', [rfReplaceAll]);
    Result := StringReplace(_CpfCnpjSemFormatcao, '/', '', [rfReplaceAll]);
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Editar dados carregados no Datasets, para fazer algumas transformações
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');

      _ValorCampoVal := FormataCamposLote(TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE).FieldByName('ValorTotalServicos').AsString);
      _ValorCampoValtrib := FormataCamposLote(TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE).FieldByName('ValorTotalBaseCalculo').AsString);

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      if _DsTecnoAtual.RecordCount > 1 then
        RaiseException('Envio em Lote não suportado para FGMAISS.');
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        SetarCampoValorTamanho('valornota_val', _ValorCampoVal, 12);
        SetarCampoValorTamanho('valtrib', _ValorCampoValtrib, 12);

        _ValorCampo := RetiraFormatacaoCpfCnpjCampo(CampoTecno('CpfCnpjPrestador'));
        case length(_ValorCampo) of
          11 : SetarCampoValor('cpfcnpjprestador_usr', FormataCpf(_ValorCampo));
          14 : SetarCampoValor('cpfcnpjprestador_usr', FormataCnpj(_ValorCampo))
        else
          ExceptionValorInvalidoCampo('CpfCnpjPrestador. Valores aceitos: CPF - 11 Caracteres; CNPJ - 14 Caracteres.');
        end;

        SetarCampoValorTamanhoObrigatorio('ctr', CampoTecno('NumeroRps'), 8);

        _ValorCampo := RetiraFormatacaoCpfCnpjCampo(CampoTecno('CpfCnpjTomador'));
        case length(_ValorCampo) of
          11 : SetarCampoValor('cpfcnpjtomador_cnpj', _ValorCampo);
          14 : SetarCampoValor('cpfcnpjtomador_cnpj', _ValorCampo)
        else
          ExceptionValorInvalidoCampo('CpfCnpjTomador');
        end;

        SetarCampoValorTamanhoObrigatorio('razaosocialtomador_cnpjn', CampoTecno('RazaoSocialTomador'), 60);
        SetarCampoValorTamanho('inscricaoestadualtom_ie', CampoTecno('InscricaoEstadualTomador'), 20);
        SetarCampoValorTamanho('inscricaomunicipaltom_im', CampoTecno('InscricaoMunicipalTomador'), 15);
        SetarCampoValorTamanhoObrigatorio('enderecotomador_lgr', CampoTecno('EnderecoTomador'), 60);
        SetarCampoValorTamanhoObrigatorio('numerotomador_num', CampoTecno('NumeroTomador'), 6);
        SetarCampoValorTamanho('complementotomador_cpl', CampoTecno('ComplementoTomador'), 20);
        SetarCampoValorTamanhoObrigatorio('bairrotomador_bai', CampoTecno('BairroTomador'), 40);
        
        if (CampoTecno('DescricaoCidadeTomador') <> '') and (CampoTecno('UfTomador') <> '') then
        begin
          SetarCampoValorTamanho('cidadetomador_cid', CampoTecno('DescricaoCidadeTomador'), 40);
          SetarCampoValorTamanho('estadotomador_est', CampoTecno('UfTomador'), 2);          
        end
        else
        begin
          SetarCampoValor('cidadetomador_cid', BuscarInfoCidade('CodIBGE', CampoTecno('CodigoCidadeTomador'), 'NomeMunicFGMAISS'));
          SetarCampoValor('estadotomador_est', BuscarInfoCidade('CodIBGE', CampoTecno('CodigoCidadeTomador'), 'UF'));
        end;

        SetarCampoValorTamanhoObrigatorio('ceptomador_cep', RemoveMascara(CampoTecno('CepTomador')), 8);
        VerificaDDD('TelefoneTomador', 'fonetomador_fon', 'DDDTomador');
        SetarCampoValorTamanho('emailtomador_mail', CampoTecno('EmailTomador'), 50);

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'DD/MM/YYYY');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('dataemissao',_ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo "DataEmissao" é obrigatório e deve ser no seguinte formato: yyyy-mm-dd');

        if CampoTecno('OptanteSimplesNacional') = '1' then
        begin
          if CampoTecno('AliquotaSimplesNacional') <> '' then
          begin
            _ValorCampo := '5' + FormataCurrency(CampoTecno('AliquotaSimplesNacional'));
            SetarCampoValor('codservico_item1', _ValorCampo);
            SetarAliquota('aliqservico_aliq1', 'AliquotaSimplesNacional');
          end
          else
            RaiseException('O campo AliquotaSimplesNacional deve ser informado.');

          SetarCampoValorTamanhoObrigatorio('aliqservicosimples_iteser1', FormatarCodigoItemListaServico(CampoTecno('CodigoItemListaServico'), True), 5);
          SetarAliquota('aliqservicosimples_alqser1', 'AliquotaISS');
          SetarCampoCurrencyFGMAISS('ValorUnitarioServico', 'valservicosimples_valser1');
        end
        else
        begin
          SetarCampoValorTamanhoObrigatorio('codservico_item1', FormatarCodigoItemListaServico(CampoTecno('CodigoItemListaServico'), True), 5);
          SetarAliquota('aliqservico_aliq1', 'AliquotaISS');
        end;
        
       
        SetarCampoCurrencyFGMAISS('ValorUnitarioServico', 'valservico_val1');
        _ValorCampo := CampoCidade('valservico_val1');
        if (_ValorCampo = '') or (_ValorCampo = '0.00') then
          SetarCampoCurrencyFGMAISS('ValorServicos', 'valservico_val1');        
        _ValorCampo := CampoCidade('valservico_val1');
        if (_ValorCampo = '') or (_ValorCampo = '0.00') then
          SetarCampoCurrencyFGMAISS(_ValorCampoVal, 'valservico_val1');
          

        if CampoTecno('CodigoCidadePrestacao') <> '' then
          SetarCampoValor('codcidade_loc', BuscarInfoCidade('CodIBGE', CampoTecno('CodigoCidadePrestacao'), 'CodFGMAISS'));

        _ValorCampo := CampoTecno('IssRetido');
        case AnsiIndexText(_ValorCampo, ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2 : SetarCampoValor('issretido_ret', 'SIM');
          3, 4, 5, 6 : SetarCampoValor('issretido_ret', 'NAO')
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        SetarCampoValorTamanhoObrigatorio('descservico_txt', CampoTecno('DiscriminacaoServico'), 720);
        SetarCampoCurrencyFGMAISS('ValorIss', 'valor_iss');
        SetarCampoCurrencyFGMAISS('ValorIssRetido', 'valor_issret');
        SetarCampoCurrencyFGMAISS('DescontoIncondicionado', 'descontoincond_desci' );
        SetarCampoCurrencyFGMAISS('DescontoCondicionado', 'outrosdesc_desco');
        SetarCampoCurrencyFGMAISS('BaseCalculo', 'BaseCalc_binss');
        SetarCampoCurrencyFGMAISS('BaseCalculo', 'BaseCalcIrrf_birrf');
        SetarCampoCurrencyFGMAISS('BaseCalculo', 'BaseCalcCsll_bcsll');
        SetarCampoCurrencyFGMAISS('BaseCalculo', 'BaseCalcPis_bpis');
        SetarCampoCurrencyFGMAISS('BaseCalculo', 'BaseCalcCofins_bcofins');
        SetarCampoCurrencyFGMAISS('AliquotaINSS', 'aliqinss_ainss');
        SetarCampoCurrencyFGMAISS('AliquotaIR', 'aliqirrf_airrf');
        SetarCampoCurrencyFGMAISS('AliquotaCSLL', 'aliqcsll_acsll');
        SetarCampoCurrencyFGMAISS('AliquotaPIS', 'aliqpis_apis');
        SetarCampoCurrencyFGMAISS('AliquotaCOFINS', 'aliqcofins_aconfins');
        SetarCampoCurrencyFGMAISS('ValorInss', 'valor_inss');
        SetarCampoCurrencyFGMAISS('ValorIr', 'valor_irrf');
        SetarCampoCurrencyFGMAISS('ValorCsll', 'valor_csll');
        SetarCampoCurrencyFGMAISS('ValorPis', 'valor_pis');
        SetarCampoCurrencyFGMAISS('ValorCofins', 'valor_cofins');

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      SetarCamposMunicipio(false);
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.