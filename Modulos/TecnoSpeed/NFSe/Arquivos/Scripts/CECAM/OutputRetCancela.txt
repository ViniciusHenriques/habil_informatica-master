{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _DSSucesso, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;

  procedure GetPonteirosDataSets;
  begin
    _DSSucesso := Datasets.GetDataSetByName('ISSECancelaNFeRetorno');    
    _DSFalha := Datasets.GetDataSetByName('Erro');
   if (_DSSucesso = nil) then
     RaiseException('DataSet ISSECancelaNFeRetorno não foi carregado corretamente.');
   if (_DSFalha = nil) then
     RaiseException('DataSet Erro não foi carregado corretamente.');
  end;

  function GetMotivo: string;  
  begin
    if Params.Values['faultstring'] <> '' then    
      Result := 'Falha na comunicação com WebService-' + Input
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin      
        if (Result = '') then
          Result := Format2('%s-%s', _DSFalha.FieldByName('ID').AsString,
            Trim(_DSFalha.FieldByName('Erro').AsString))
        else
          Result := Format3('%s: %s-%s', Result, _DSFalha.FieldByName('ID').AsString,
            Trim(_DSFalha.FieldByName('Erro').AsString));

        _DSFalha.Next;
      end;      
    end
    else
      Result := '';
  end;


  function GetStatus : string;
  begin    
    if xmlSelectNodeValue(Input,'//*[local-name()="NotaFiscal"]', result) then
       result := 'SUCESSO'
    else
       result := 'ERRO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    result := TStringList.Create;
    result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSets;

  Progress('Adicionando valores aos campos.');
  _ListFields := CreateFieldsResponse;
  if _ListFields <> nil then
  Try
    AddValueListFields('Motivo',GetMotivo);
    AddValueListFields('Status', GetStatus);
    AddValueListFields('DataCancelamento', '');
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;

end.
