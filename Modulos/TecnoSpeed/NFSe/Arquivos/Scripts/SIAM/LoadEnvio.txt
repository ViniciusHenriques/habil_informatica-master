{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;
  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps: Integer;
  DSCIDADE_NOTA, DSCIDADE_LOTE: string;
const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := UpperCase(Params.Values['EnvioSincrono']) = 'TRUE';
  end;

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

  procedure ExceptionCampoObrigatorio(const aCampo: string);
  begin
    RaiseException('Campo ' + aCampo + ' não pode ser vazio para essa cidade.');
  end;

  procedure SetarCampoCpfCnpjSiam(const aNomeCampoCpf, aNomeCampoCnpj, aValor: string);
  begin
    case Length(aValor) of
      14:
        SetarCampoValor(aNomeCampoCnpj, aValor);
      11:
        SetarCampoValor(aNomeCampoCpf, aValor);
    else
      RaiseException('Valor invalido para o campo: ' + aNomeCampoCpf + '/' + aNomeCampoCnpj + '. Deve conter 11 ou 14 caracteres.');
    end;
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      DSCIDADE_NOTA := 'Rps';

      if EnvioSincrono then
        DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio'
      else
        RaiseException('Geração de Xml Assíncrono não suportado pelo padrão SIAM');

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS
        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := Format3('RPS_%s_%s_%s', CampoTecno('NumeroRps'), CampoTecno('SerieRps'), CampoTecno('TipoRps'));
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps', 'NumeroRps', 15);

        SetarCampoObrigatorioTamanho('SerieRps', 'SerieRps', 5);
        _ValorCampo := CampoTecno('TipoRps');
        case _ValorCampo of
          '1', '2', '3': SetarCampo('TipoRps')
          else ExceptionValorInvalidoCampo('TipoRps. Valores aceitos: 1, 2 ou 3.');
        end;

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          SetarCampoValor('DataEmissao', _ValorCampo);
        end;
        
          //Competencia
        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao')
        else
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('Competencia');
          end;
        end;
        if _ValorCampo <> '' then
          SetarCampoValor('Competencia', _ValorCampo);

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
           else ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);

        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');
    

        //Dados Servico
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('ValorIss', False);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.', []);
          FormataFloat(StrToFloat(_ValorCampo), 6, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('AliquotaISS');

        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
          else ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;
        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}
        SetarCampo('ResponsavelRetencao');

        SetarCampoObrigatorioTamanho('CodigoItemListaServico', 'ItemListaServico', 5);
        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(_ValorCampo, True);
        SetarCampoValor('ItemListaServico', _ValorCampo);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
        VerificaSeEhNumero('CodigoCnae', _ValorCampo);
        SetarCampoObrigatorioTamanho('CodigoCnae', 'CodigoCnae', 7);
        SetarCampoValor('CodigoCnae', _ValorCampo);

        SetarCampo('CodigoTributacaoMunicipio');
        // 2000 caracteres
        SetarCampoObrigatorioTamanho('DiscriminacaoServico', 'Discriminacao', 2000);

        if (CampoTecno('CodigoCidadePrestacao') <> '99999') then
        begin
          _ValorCampo := RemoveMascara(CampoTecno('CodigoCidadePrestacao'));
          VerificaSeEhNumero('CodigoCidadePrestacao', _ValorCampo);
          SetarCampoObrigatorioTamanho('CodigoCidadePrestacao', 'CodigoMunicipio', 7);
        end
        else
          SetarCampoValor('CodigoMunicipio', '99999');

        SetarCampoTamanho('CodigoPais', 'CodigoPais', 4);

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3', '4', '5', '6', '7']) then
          SetarCampo('ExigibilidadeIss')
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
        SetarCampo('MunicipioIncidencia');

        //Dados Prestador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));        
        VerificaSeEhNumero('CpfCnpjPrestador', _ValorCampo);
        SetarCampoCpfCnpj('CpfPrestador', 'CnpjPrestador', _ValorCampo);

        _ValorCampo := CampoTecno('InscricaoMunicipalPrestador');
        if _ValorCampo = '' then
          _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
        _ValorCampo := RemoveMascara(_ValorCampo);
        VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
        SetarCampoTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', 15);
        SetarCampoValor('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')));

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
        SetarCampoCpfCnpj('CpfTomador', 'CnpjTomador', _ValorCampo);

        _ValorCampo := CampoTecno('InscricaoMunicipalTomador');        
        _ValorCampo := RemoveMascara(_ValorCampo);
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);
        SetarCampoTamanho('InscricaoMunicipalTomador', 'InscricaoMunicipalTomador', 15);
        SetarCampoValor('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')));

        SetarCampo('RazaoSocialTomador');
        SetarCampo('EnderecoTomador');
        SetarCampo('NumeroTomador');
        SetarCampo('ComplementoTomador');
        SetarCampo('BairroTomador');
        SetarCampoValor('CodigoMunicipioTomador', CampoTecno('CodigoCidadeTomador'));
        SetarCampo('UfTomador');
        SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));
        SetarCampo('CepTomador');
        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampo('EmailTomador');

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        VerificaSeEhNumero('CpfCnpjIntermediario', _ValorCampo);
        SetarCampoCpfCnpj('CpfIntermediario', 'CnpjIntermediario', _ValorCampo);
        SetarCampoValor('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')));
        SetarCampo('RazaoSocialIntermediario');

        //Dados Construção Civil
        SetarCampo('CodigoObra');
        SetarCampo('Art');

        //Regime Especial Tributação
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if _ValorCampo <> '' then
        begin
          if AnsiMatchText(_ValorCampo, ['1', '2', '3', '4', '5', '6']) then
            SetarCampo('RegimeEspecialTributacao')
        end;

        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional');
          else ExceptionValorInvalidoCampo('OptanteSimplesNacional. Valores aceitos: 1 - Sim, 2 - Não.');
        end;

        //IncentivoFiscal
        _ValorCampo := CampoTecno('IncentivoFiscal');
        case _ValorCampo of
          '1', '2': SetarCampo('IncentivoFiscal')
          else ExceptionValorInvalidoCampo('IncentivoFiscal. Valores aceitos: 1 - Sim, 2 - Não.');
        end;

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio(false);

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote');

      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)
      else
        SetarCampoValor('Versao', '2.01');

      _ValorCampo := CampoTecno('NumeroLote');
      if (_ValorCampo <> '') then
        SetarCampo('NumeroLote')
      else
        ExceptionCampoObrigatorio('NumeroLote');

      //Dedução campo CpfCnpjRemetente
      _ValorCampo := CampoTecno('CpfCnpjRemetente');
      if _ValorCampo = '' then
      begin
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString;
        if _ValorCampo = '' then
          ExceptionCampoObrigatorio('CpfCnpjRemetente');
      end;
      VerificaSeEhNumero('CpfCnpjRemetente', _ValorCampo);
      SetarCampoCpfCnpjSiam('CpfRemetente', 'CnpjRemetente', RemoveMascara(_ValorCampo));


      //Dedução campo InscricaoMunicipalRemetente
      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
      _ValorCampo := RemoveMascara(_ValorCampo);
      VerificaSeEhNumero('InscricaoMunicipalRemetente', _ValorCampo);
      SetarCampoTamanho('InscricaoMunicipalRemetente', 'InscricaoMunicipalRemetente', 15);
      SetarCampoValor('InscricaoMunicipalRemetente', RemoveMascara(CampoTecno('InscricaoMunicipalRemetente')));

      //Dedução quantidade
      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.