  {$I ..\Comuns\Comuns.TXT}

  function UnEscapeXml(const aXML: string): string;
  begin
    // "Desescapar" o XML
    Result:= aXML;
    Result:= StringReplace(Result, '&apos;', '''', [rfReplaceAll]);
    Result:= StringReplace(Result, '&quot;', '"',  [rfReplaceAll]);
    Result:= StringReplace(Result, '&gt;',  '>', [rfReplaceAll]);
    Result:= StringReplace(Result, '&lt;',  '<', [rfReplaceAll]);
    Result:= StringReplace(Result, '&amp;', '&', [rfReplaceAll]);
    Result:= StringReplace(Result, '&#xD;', #13, [rfReplaceAll]);
  end;
  
  function RemoveCaracteresInvalidosRespostaActcon(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, '&amp;', '@@@@@',[rfReplaceAll]);
    Result := StringReplace(Result, ';', '\delimiter',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13#10, '|', [rfReplaceAll]);
    Result := StringReplace(Result, #13, '|', [rfReplaceAll]);
    Result := StringReplace(Result, #10, '|', [rfReplaceAll]);
    Result := StringReplace(Result,'@@@@@','&amp;',[rfReplaceAll]);
  end;

  procedure GetPonteirosDataSetsXpath(const aDataSetNameSucesso : string;  const aDataSetNamesFalha : TStringList;
    var aDSSucesso, aDSFalha, aDSFalhaLote, aDSAlerta : TSpdXSDClientDataSet);
  begin
    aDSSucesso := Datasets.GetDataSetByName(aDataSetNameSucesso);

    aDSFalha := Datasets.GetDataSetByXpath(aDataSetNamesFalha[0]);
    aDSFalhaLote := Datasets.GetDataSetByXpath(aDataSetNamesFalha[1]);
    aDSAlerta := Datasets.GetDataSetByXpath(aDataSetNamesFalha[2]);

    if (aDSSucesso = nil) then
       RaiseException('DataSet ' + aDataSetNameSucesso + ' não foi carregado corretamente.');

    if (aDSFalha = nil) then
        RaiseException('DataSet ' + aDataSetNamesFalha[0] + ' não foi carregado corretamente.');

    if (aDSFalhaLote = nil) then
        RaiseException('DataSet ' + aDataSetNamesFalha[1] + ' não foi carregado corretamente.');

    if (aDSAlerta = nil) then
        RaiseException('DataSet ' + aDataSetNamesFalha[2] + ' não foi carregado corretamente.');
  end;

  function GetXmlNFSe(const aXpath, aParamName : string) : string;
  begin
    if aXpath = '' then
      Result := XmlSelect(Params.Values[aParamName], '//*[local-name()="CompNfse"]')
    else
      Result := XmlSelect(Params.Values[aParamName], aXpath);

    Result := StringReplace(Result, '&lt;br /&gt;', '|', [rfReplaceAll]);
    Result := RemoveCaracteresInvalidosRespostaActcon(Result);
  end;


  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult(aListFieldsResult) + #13#10
    else
      Result := FormatLineResult(aListFieldsResult) +
        Params.Values['DelimitadorDaLinha'];
  end;

  function RetornouNota(aXmlLote: string): Boolean;
  var
    _str: string;
  begin
    Result := XmlSelectNodeValue(aXmlLote, '//*[local-name() = "codigoStatus"]', _str) and (_str = '100');      
  end;

   function GetValue(const aTag: string): String;
  var
    _str: string;
  begin
    if XmlSelectNodeValue(Params.Values['XML'], '//*[local-name() = "' + aTag + '"]', _str) then
      Result := _str;
  end;



  function GetListFieldsNota(var aDSSucesso, aDSFalha : TSpdXSDClientDataSet;
    var aListFields : TStringList; const aXpathNFSe, aParamName : string): String;
  var
    _Motivo, _ValorCampo, _XmlNota: string;
  begin
    _Motivo := GetMotivo(aDSFalha);
    if RetornouNota(Params.Values[aParamName]) then
    begin
      aDSSucesso.First;
      while not aDSSucesso.Eof do
      begin
        aListFields := CreateFieldsResponseNota;
        try
          AddValueListFields('Motivo', '', aListFields);
          AddValueListFields('Status', 'SUCESSO', aListFields);

          AddValueListFields('Cnpj', '', aListFields);

          AddValueListFields('InscMunicipal', '', aListFields)

          AddValueListFields('SerieRps',  '',
            aListFields);
          AddValueListFields('NumeroRps', '',
            aListFields);
           
          AddValueListFields('NumeroNFSe', GetValue('numeroNota'),
            aListFields);
          AddValueListFields('DataEmissaoNFSe', '',
            aListFields);
          AddValueListFields('DataAutorizacao', '',
            aListFields);
          AddValueListFields('CodVerificacao',
            '', aListFields);

          _ValorCampo := aDSSucesso.FieldByName('Status').AsString;

          if _ValorCampo = '100' then
            AddValueListFields('Situacao', 'AUTORIZADA', aListFields);

          AddValueListFields('DataCancelamento', '', aListFields);

          AddValueListFields('ChaveCancelamento', GetValue('numeroNota') + '_' + GetValue('chaveSeguranca'),
              aListFields);
          _ValorCampo := Params.Values[aParamName];
          AddValueListFields('Xml', UnindentXml(_ValorCampo), aListFields);

          AddValueListFields('Tipo', '', aListFields);

          Result := Result + GetResult(aListFields);
        Finally
          aListFields.Free;
        end;
        aDSSucesso.Next;
      end;
    end
    else
    begin
      aListFields := CreateFieldsResponseFalha;
      try
        AddValueListFields('Motivo', _Motivo, aListFields);
        AddValueListFields('Status', 'ERRO', aListFields);
        Result := Result + GetResult(aListFields);
      Finally
        aListFields.Free;
      end;
    end;
  end;

  function GetListFieldsFaulstring(var aListFields : TStringList; const aInput: string): String;
  var
    _Motivo: string;
  begin
    aListFields := CreateFieldsResponseFalha;
    try
      _Motivo := 'Falha na comunicação com WebService-' + GetFaultString(aInput);
      AddValueListFields('Status', 'ERRO', aListFields);
      AddValueListFields('Motivo',_Motivo, aListFields);
      Result := Output + FormatLineResult(aListFields) + Params.Values['DelimitadorDaLinha'];
    Finally
      aListFields.Free;
    end;
  end;

  function CorrigirCancelamentoRetorno(const aXml: string): string;
  begin
    Result := StringReplace(aXml, 'ConfirmacaoCancelamento>', 'Confirmacao>', [rfReplaceAll]);
    Result := StringReplace(Result, '<PedidoCancelamento>', '<Pedido>', [rfReplaceAll]);
    Result := StringReplace(Result, '</PedidoCancelamento>', '</Pedido>', [rfReplaceAll]);
  end;


  function GetListFieldsNFSeInexistente(var aListFields : TStringList): String;
  begin
    aListFields := CreateFieldsResponseFalha;
    try
      AddValueListFields('Status', 'ERRO', aListFields);
      AddValueListFields('Motivo', 'NFSe não encontrada na base de dados.', aListFields);
      Result := Output + FormatLineResult(aListFields) + Params.Values['DelimitadorDaLinha'];
    Finally
      aListFields.Free;
    end;
  end;