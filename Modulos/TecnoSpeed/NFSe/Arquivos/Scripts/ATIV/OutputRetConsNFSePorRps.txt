{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}

Var
  _ListFields : TStringList;
  _Xml, _Erro, _Motivo, _Status, _Situacao: string;

  function GetSituacaoMensagemErro: String;
  var
    _Status, _Linha, _Chave, _Erro: string;
  begin
    if xmlSelectNodeValue(Input, '//*[local-name()="NOTA"]', _Erro) then      
      Result := _Erro    
    else if (AnsiPos('Usuario ou senha invalidos', Input) > 0) then    
      Result := 'Usuario ou senha invalidos'    
    else
      Result := '';
  end;
  
  function RemoveMascara(const aValor : String) : String;
  begin
    Result := StringReplace(aValor, '/', '', [rfReplaceAll, rfIgnoreCase]);
    Result := StringReplace(Result, '-', '', [rfReplaceAll, rfIgnoreCase]);
    Result := StringReplace(Result, '.', '', [rfReplaceAll, rfIgnoreCase]);
  end;

  function GetMotivo(const aXML: string) : string;      
  begin        
    if Params.Values['faultstring'] <> '' then
      Result := 'Falha na comunicação com WebService-' + Input
    else
    begin
      if (AnsiPos('Código de Verificação:', Input) > 0 ) or 
        (AnsiPos('Status:', Input) > 0) then
        Result := ''
      else
        Result := GetSituacaoMensagemErro;
    end;
  end;

  function GetStatus(const aMotivo: string) : string;
  begin
    if (aMotivo <> '') or (Params.Values['faultstring'] <> '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  function GetValue(const aXML, aInicio, aFinal: string) : string;
  var    
    _PosIni, _PosFim, _Tamanho: integer;
  begin
    _PosIni := Pos(aInicio, aXML);
    if aFinal = '' then
      _PosFim := Length(aXML)
    else
      _PosFim := Pos(aFinal, aXML);
    _Tamanho := _PosFim - _PosIni;
    Result := UpperCase(copy(aXML, _PosIni, _Tamanho));
    Result := StringReplace(Result, UpperCase(aInicio), '', [rfReplaceAll]);
    Result := Trim(Result);    
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, '&amp;', '@@@@@',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #10, '|', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
    Result := StringReplace(Result, '>|', '>',[rfReplaceAll]);
    Result := StringReplace(Result,'@@@@@','&amp;',[rfReplaceAll]);
  end;

  function GetXmlNFSe : string;
  begin
    Result := RemoveCaracteresInvalidosResposta(Params.Values['XmlNFSe']);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i : integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);

    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function XmlSemDados(const aXml: String): String;
  var
    _Valor: String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="NFSE"]', _Valor) then
    begin
     if (_Valor = 'false') or (_Valor = '') then
       Result := 'false'
     else
       Result := 'true';
    end;
  end;  

  function GetCnpjCpf(const aXML : string) : string;
  begin
    if AnsiPos(' CPF ',aXML) > 0 then
      Result := RemoveMascara(GetValue(_XML, 'CPF', 'Valor'))
    else
      Result := RemoveMascara(GetValue(_XML, ' CNPJ ', 'Valor'));    
  end;

  function GetSituacaoFinal(const aXML : string) : string;
  begin
    Result := GetValue(_XML, 'Status:', 'Tomador')
    if Result = 'CONCLUíDA' then
      Result := 'AUTORIZADA';
  end;

  function GetDataAutorizacao(const aXML : string) : string;
  begin
    Result := GetValue(aXML, 'de', 'Status');
    Result := Copy(Result, 0, 10);
    Result := FormatAnyDateTime(Result, 'yyyy-mm-dd');
  end;

begin

  Progress('Carregado valores.');

  Output := '';

  if Pos('&amp;', Input) = 0 then
    _Xml := StringReplace(Input, '&',  '&amp;',  [rfReplaceAll])
  else
    _Xml := Input;

  Progress('Adicionando valores aos campos');

  xmlSelectNodeValue(_XML, '//*[local-name()="NOTA"]', _XML); 
  _Motivo := GetMotivo(_XML);  

  if (_Motivo <> '') or (XmlSemDados(_XML) = 'false') then
  begin
    try
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',_Motivo);
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    finally
      _ListFields.Free;
    end;
  end
  else
  begin
    _ListFields := CreateFieldsResponse;        
    if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
    Try      
      AddValueListFields('Status', GetStatus(_Motivo));                       
      AddValueListFields('Motivo', _Motivo);
      AddValueListFields('Cnpj', GetCnpjCpf(_XML));
      AddValueListFields('NumeroNFSe', GetValue(_XML, 'NFS-e Nº', 'de'));
      AddValueListFields('Situacao', GetSituacaoFinal(_XML));
      AddValueListFields('CodVerificacao', GetValue(_XML, 'Código de Verificação:', ''));
      AddValueListFields('DataEmissaoNFSe', GetDataAutorizacao(_XML));
      AddValueListFields('DataAutorizacao', GetDataAutorizacao(_XML));
      { Campos não retornam no XML da consulta de NFSe por RPS }
      AddValueListFields('InscMunicipal', '');
      AddValueListFields('SerieRps', '');
      AddValueListFields('NumeroRps', '');            
      AddValueListFields('DataCancelamento', '');
      AddValueListFields('ChaveCancelamento', '');
      AddValueListFields('Xml', GetXMLNFSe);
      AddValueListFields('Tipo', '');      

      if (Params.Values['DelimitadorDaLinha'] = '') then
        Output := Output + FormatLineResult + #13#10
      else
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];

    Finally
      _ListFields.Free;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.
