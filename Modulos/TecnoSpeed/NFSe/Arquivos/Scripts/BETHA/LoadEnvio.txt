{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo, _DataEmissao: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _DsServicoAtual: TSpdXSDClientDataSet;  
  _Vlr: Double;
  _QtdeRps: Integer;
  _aMax, _parcelas: Integer;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSTECNO_SERVICO = 'Servico';
  DSCIDADE_LOTE = 'EnviarLoteRpsEnvio';
  DSCIDADE_NOTA = 'Rps';
  DSTECNO_FORMAPAGAMENTO = 'FormaPagamento';
  DSCIDADE_CONDICAOPAGAMENTO = 'CondicaoPagamento';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasetsItens.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\UTILS.txt}

// Informar campo e o DataSet Atual, ex: CampoServico(_DsTecnoAtual, 'DiscriminacaoServico');

  function CampoServico(const aDataSet: TSpdXSDClientDataSet; aCampo: string): string;
  begin
    Result := Trim(Campo(aDataSet, aCampo).AsString);
  end;
  
  function VerificaSeCampoEVazio(const aDescricao: string; aValorCampo: string; aObrigatorio: boolean): string;
  begin
    if (aValorCampo <> '') or (aObrigatorio = True) then
      Result := '[' + aDescricao + '=' + aValorCampo + ']';
  end;

  function TransformarJSON(const aValorCampo: string; aDataSet: TSpdXSDClientDataSet): string;
  var    
    _Descricao, _Qtd, _VlrUnit : string; // Obrigatórios
    _Aliq, _ItemServico: string; // Opcionais
  begin    
      _Descricao := CampoServico(aDataSet, 'DiscriminacaoServico');
      _Descricao := StringReplace(_Descricao,'[','',[rfReplaceAll]);
      _Descricao := StringReplace(_Descricao,']','',[rfReplaceAll]);
      _Descricao := StringReplace(_Descricao,'{','',[rfReplaceAll]);
      _Descricao := StringReplace(_Descricao,'}','',[rfReplaceAll]);
      _Descricao := StringReplace(_Descricao,'|','',[rfReplaceAll]);    
      _Descricao := StringReplace(_Descricao,'<','',[rfReplaceAll]);
      _Descricao := StringReplace(_Descricao,'>','',[rfReplaceAll]);
      _Descricao := VerificaSeCampoEVazio('Descricao', _Descricao, True);
      
      _ItemServico := CampoServico(aDataSet, 'CodigoItemListaServico');
      _ItemServico := FormatarCodigoItemListaServico(_ItemServico, False);           
      _ItemServico := VerificaSeCampoEVazio('ItemServico', _ItemServico, False);    
      
      _Qtd := FormataCurrency(CampoServico(aDataSet, 'QuantidadeServicos'));
      if _Qtd = '' then
        _Qtd := '1.00';
      _Qtd := VerificaSeCampoEVazio('Quantidade', _Qtd, True);    
      
      _VlrUnit := FormataCurrency(CampoServico(aDataSet, 'ValorUnitarioServico'));
      if _VlrUnit = '' then
      begin
        _VlrUnit := FormataCurrency(CampoServico(aDataSet, 'ValorServicos'));
        if _VlrUnit = '' then
          RaiseException('O campo "ValorServicos" ou "ValorUnitarioServico" não pode ser igual à zero ou vazio.')              
      end;
      _VlrUnit := VerificaSeCampoEVazio('ValorUnitario', _VlrUnit, True);
        
        
      if (aDataSet = _DsTecnoAtual) then
        _Aliq := CampoServico(aDataSet, 'AliquotaISS')
      else 
        _Aliq := CampoServico(aDataSet, 'AliquotaServico');          
      _Aliq := FormataCurrency(_Aliq);      
      _Aliq := VerificaSeCampoEVazio('Aliquota', _Aliq, False);  
       
      Result := aValorCampo + '[' + _Descricao + _ItemServico + _Qtd + _VlrUnit + _Aliq + ']';    
  end;
  
  function VerificaSeEhJSON(const aValorCampo: string): boolean;
  begin
    if (Pos('{[[', aValorCampo) > 0) or (Pos(']]}', aValorCampo) > 0) then
    begin
      if (Pos('}', aValorCampo) < 2001) and (Pos(']]}', aValorCampo) <> 0) then
        Result := True
      else
        RaiseException('O campo "DiscriminacaoServico" em formato JSON, deve possuir menos de 2000 caracteres e a chave "}" como último carácter');
    end;    
  end;
  
begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');

      PrepararTecnoNFSeDatasetsItens;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoObrigatorioTamanho('NumeroRps','NumeroRps', 15);

        SetarCampoObrigatorioTamanho('SerieRps','SerieRps', 5);

        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('DataEmissao'));
        if (_ValorCampo <> '') and ((Length(_ValorCampo) = 17) or (Length(_ValorCampo) = 8) or (Length(_ValorCampo) = 15)) then
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), XSDDATETIMEFORMAT);
           SetarCampoValor('DataEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: YYYY-MM-DDThh:mm:ss');

        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampo('OptanteSimplesNacional')
        else
          RaiseException('Para essa cidade o campo OptanteSimplesNacional é obrigatorio e deve ser 1 - SIM, ou 2 - NÃO');
 
        SetarCampo('IncentivadorCultural');

         _ValorCampo := CampoTecno('SituacaoNota');
        if (_ValorCampo = '1') or (_ValorCampo = '2') then
          SetarCampoValor('Status', CampoTecno('SituacaoNota'))
        else
          RaiseException('Para essa cidade o campo SituacaoNota é obrigatorio e deve ser 1 - Normal, ou 2 - Cancelada');

        case StrToIntDef(CampoTecno('TipoTributacao'), -1) of
          1, 3, 4 : SetarCampoValor('NaturezaOperacao', '3');
          2 : SetarCampoValor('NaturezaOperacao', '4');
          5 : RaiseException('Valor inválido para o campo TipoTributacao. Para ABRASF o TipoTributacao não pode ser "5 - Retida". Para isso pode se utilizar "6 - Tributavel dentro do municipio" ou "7 - Tributável fora do município');
          6 : SetarCampoValor('NaturezaOperacao', '1');
          7 : SetarCampoValor('NaturezaOperacao', '2');
        else
          RaiseException('Valor inválido para o campo TipoTributacao. Valores aceitos: 1, 2, 3, 4, 6, 7.');
        end;

        _ValorCampo := CampoTecno('TipoTributacao');
        // NaturezaTributacao: ignorar quando TipoTributacao for diferente de 6 ou 7
        if AnsiMatchText(_ValorCampo, ['6', '7']) then
        begin
          _ValorCampo := CampoTecno('NaturezaTributacao');
          case StrToIntDef(CampoTecno('NaturezaTributacao'), -1) of
            1: ;// IGNORADO
            2, 3: SetarCampoValor('NaturezaOperacao', '1');
            4: SetarCampoValor('NaturezaOperacao', '5');
            5: SetarCampoValor('NaturezaOperacao', '6');
          end;
        end;

        if not AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['', '0']) then
        begin
          if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6'])) then
            SetarCampo('RegimeEspecialTributacao')
          else
            RaiseException('Valor inválido para o campo RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5, 6.');
        end;

        _ValorCampo := RemoveMascara(CampoTecno('NumeroRpsSubstituido'));
        VerificaSeEhNumero('NumeroRpsSubstituido', _ValorCampo);
        SetarCampoValorTamanho('NumeroRpsSubstituido', _ValorCampo, 15);

        SetarCampoTamanho('SerieRpsSubstituido', 'SerieRpsSubstituido', 5);

        _ValorCampo := CampoTecno('TipoRpsSubstituido');
        if AnsiMatchText(_ValorCampo, ['', '1', '2', '3']) then
          SetarCampoValorTamanho('TipoRpsSubstituido', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRpsSubstituido deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['', '1', 'sim', 'true', '2', 'nao', 'não', 'false', '3']) of
          0: // Vazio: deduzir do TipoTributacao
          begin
            if CampoTecno('TipoTributacao') = '5' then
              SetarCampoValor('IssRetido', '1')
            else
              SetarCampoValor('IssRetido', '2');
          end;
          1, 2, 3: SetarCampoValor('IssRetido', '1');
          4, 5, 6, 7: SetarCampoValor('IssRetido', '2');
          8: SetarCampoValor('IssRetido', '3');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false, 3.');
        end;

        SetarCampoCurrency('ValorIss', False);

        if CampoTecno('ValorIssRetido') <> '' then
          SetarCampoCurrency('ValorIssRetido', False)
        else
        begin
          // Deduzível (se IssRetido=Sim, utiliza ValorIss)
          if AnsiMatchText(CampoTecno('IssRetido'), [ '1', 'sim', 'true']) then
            SetarCampoValor('ValorIssRetido', CampoCidade('ValorIss'));
        end;

        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('BaseCalculo', False);
        SetarCampoCurrency('ValorLiquidoNfse', False);
        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        // Transformável: para BETHA, 5% = 5
        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'),',','.',[rfReplaceAll]);
          _Vlr := StrToFloat(_ValorCampo);  //Bug #2287, retirado divisão por 100;
          _ValorCampo := FormataFloat( _Vlr, 5, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          RaiseException('Valor inválido para o campo AliquotaISS, o mesmo deve ser informado da seguinte maneira: "5.00" para 5%');

        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, False);
        SetarCampoObrigatorioValorTamanho('ItemListaServico', 'CodigoItemListaServico', _ValorCampo, 5);

        _ValorCampo := RemoveMascara(CampoTecno('CodigoCnae'));
        VerificaSeEhNumero('CodigoCnae', _ValorCampo);
        SetarCampoTamanho('CodigoCnae','CodigoCnae', 7);

        SetarCampoTamanho('CodigoTributacaoMunicipio','CodigoTributacaoMunicipio', 20);        

        _ValorCampo := CampoTecno('CodigoCidadePrestacao');
        if _ValorCampo = '' then
          RaiseException('Valor inválido para o campo CodigoCidadePrestacao')
        else
        begin
          _ValorCampo := ConverterCodigoMunicipio( _ValorCampo, True);
          SetarCampoValor('CodigoMunicipio', _ValorCampo);
        end;

        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', RemoveMascara(CampoTecno('CpfCnpjPrestador')));
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
        SetarCampoObrigatorioValorTamanho('InscricaoMunicipalPrestador', 'InscricaoMunicipalPrestador', _ValorCampo, 15);

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        if _ValorCampo <> '' then
        begin
          case Length(_ValorCampo) of
            11: SetarCampoValor('CpfTomador', _ValorCampo);
            14: SetarCampoValor('CnpjTomador', _ValorCampo);
          else
            RaiseException('Valor inválido para o campo CpfCnpjTomador, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
          end;
        end;

        SetarCampoTamanho('RazaoSocialTomador', 'RazaoSocialTomador', 115);

        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        SetarCampoValorTamanho('InscricaoMunicipalTomador', _ValorCampo, 15);

        if CampoTecno('InscricaoEstadualTomador') <> '' then
          SetarCampoValor('InscricaoEstadual', CampoTecno('InscricaoEstadualTomador'));

        SetarCampoTamanho('EnderecoTomador', 'EnderecoTomador', 125);
        SetarCampoTamanho('NumeroTomador', 'NumeroTomador', 10);
        SetarCampoTamanho('ComplementoTomador', 'ComplementoTomador', 60);
        SetarCampoTamanho('BairroTomador', 'BairroTomador', 60);
        
        _ValorCampo := CampoTecno('PaisTomador');
        if _ValorCampo = '01058' then
          _ValorCampo := '1058';

        if ((_ValorCampo <> '1058') and (UpperCase(CampoTecno('PaisTomador')) <> 'BRASIL') and (CampoTecno('PaisTomador') <> '')) or (CampoTecno('CodigoCidadeTomador') = '99999') then
        begin
          SetarCampoValor('CodigoMunicipioTomador','99999');
          SetarCampoValor('UfTomador', 'EX');
        end
        else
        begin
           _ValorCampo := CampoTecno('CodigoCidadeTomador');
           if _ValorCampo = '' then
           begin
              // O preenchimento da Cidade do Tomador é obrigatório para tomadores Pessoas Jurídicas (com CNPJ).
              if CampoCidade('CnpjTomador') <> '' then
              RaiseException('Valor inválido para o campo CodigoCidadeTomador');
           end
           else
           begin
             _ValorCampo := ConverterCodigoMunicipio( _ValorCampo, True);
             SetarCampoValor('CodigoMunicipioTomador', _ValorCampo);
           end;
        end;

        _ValorCampo := RemoverAcentos(CampoTecno('OutrasInformacoes'));
        SetarCampoValorTamanho('OutrasInformacoes',_ValorCampo , 255); 

        if CampoTecno('UfTomador') <> '' then
          SetarCampoTamanho('UfTomador', 'UfTomador', 2)
        else
        begin
          // Conteudo do _ValorCampo: CodigoCidadeTomador
          if _ValorCampo <> '' then
          begin
            _ValorCampo := BuscarInfoCidade('CodIBGE', _ValorCampo, 'UF');
            SetarCampoValor('UfTomador', _ValorCampo);
          end;
        end;

        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoTamanho('CepTomador', 'CepTomador', 8);

        SetarTelefone('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoTamanho('EmailTomador', 'EmailTomador', 80);

        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 115);

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario, CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;

       _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario'));
       SetarCampoValorTamanho('InscricaoMunicipalIntermediario', _ValorCampo, 15);

        SetarCampoTamanho('CodigoObra', 'CodigoObra', 15);
        SetarCampoTamanho('Art', 'Art', 15);        
        
        // Tratamento para dataset "INCLUIRSERVICO", gerar JSON.        
        
        _DsServicoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_SERVICO);        
        _ValorCampo := CampoTecno('DiscriminacaoServico');               
        
        if not (VerificaSeEhJSON(_ValorCampo)) and (_ValorCampo <> '') and (_DsServicoAtual.RecordCount > 0) then
        begin          
          // O primeiro serviço da Discriminação será formado pelos campos do DataSet RPS 
          _ValorCampo := TransformarJSON('', _DsTecnoAtual);
          
          _DsServicoAtual.First;          
          while not _DsServicoAtual.Eof do
          begin            
            _ValorCampo := TransformarJSON(_ValorCampo, _DsServicoAtual);
            
            _DsServicoAtual.Next;
          end;          
          SetarCampoValor('Discriminacao', '{' + _ValorCampo + '}');
        end
        else
          SetarCampoObrigatorioTamanho('DiscriminacaoServico','Discriminacao', 2000);

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipio(false);
      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      _ValorCampo := CampoTecno('NumeroLote');
      VerificaSeEhNumero('NumeroLote', _ValorCampo);
      SetarCampoObrigatorioValorTamanho('NumeroLote', 'NumeroLote', _ValorCampo, 15); 
      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote')
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('IdLote', _ValorCampo);
      end;
  
      if CampoTecno('CpfCnpjRemetente') <> '' then
        SetarCampoValor('Cnpj', RemoveMascara(CampoTecno('CpfCnpjRemetente')))
      else
        SetarCampoValor('Cnpj', RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString));

      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;

      _ValorCampo := RemoveMascara(_ValorCampo);
      SetarCampoObrigatorioValorTamanho('InscricaoMunicipal', 'InscricaoMunicipalPrestador',  _ValorCampo, 15);

      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_FORMAPAGAMENTO);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_CONDICAOPAGAMENTO);

      _DsTecnoAtual.First;
      _parcelas := 1;
      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;
        
          _ValorCampo := CampoTecno('TipoPagamento');
          case StrToIntDef(_ValorCampo, -1) of
            1 : SetarCampoValor('TipoPagamento', 'A_VISTA');
            2 : SetarCampoValor('TipoPagamento', 'NA_APRESENTACAO');
            3 : SetarCampoValor('TipoPagamento', 'A_PRAZO');
            4 : SetarCampoValor('TipoPagamento', 'CARTAO_DEBITO');
            5 : SetarCampoValor('TipoPagamento', 'CARTAO_CREDITO');
          else
            RaiseException('Valor inválido para o campo TipoPagamento.' + 
              ' Valores aceitos: 1-Á vista, 2-Apresentação, 3-Prazo, 4-Débito, 5-Crédito.');
          end;

          if CampoTecno('QuantidadeParcelas') <> '' then 
          begin
            VerificaSeEhNumero('QuantidadeParcelas', CampoTecno('QuantidadeParcelas'));
            SetarCampoObrigatorioTamanho('QuantidadeParcelas', 'QtdParcelas', 2);
          end;
          
          SetarCampoValor('Parcela', IntToStr(_parcelas));
          _parcelas := _parcelas + 1;;   

          _ValorCampo := FormatAnyDateTime(CampoTecno('DataVencimentoParcela'), 'dd/mm/yyyy');
          _DataEmissao := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('DataEmissao').AsString;
          _DataEmissao := FormatAnyDateTime(_DataEmissao, 'dd/mm/yyyy');
        
          if StrToDate(_ValorCampo) < StrToDate(_DataEmissao) then
           RaiseException('Valor inválido para o campo DataVencimentoParcela, deve ser maior que a Data de Emissão.')
          else
           _ValorCampo := FormatAnyDateTime(CampoTecno('DataVencimentoParcela'), 'dd-mm-yyyy');
          
          SetarCampoValor('DataVencimentoParcela', _ValorCampo);

          SetarCampoCurrency('ValorParcela', True);

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
    end
    else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.
