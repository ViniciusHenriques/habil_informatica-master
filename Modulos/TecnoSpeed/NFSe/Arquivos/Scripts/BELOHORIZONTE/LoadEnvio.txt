{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _QtdeRps: Integer;
  DSCIDADE_LOTE: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    if (UpperCase(Params.Values['EnvioSincrono'])) = 'TRUE' then
      Result := True
  end;
  
  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

begin
  { Belo Horizonte: geração dos datasets da cidade é postergada, precisamos
      antes saber qual padrão de TX2 será usado, pois usam configurações diferentes.}
  Progress('Criando XSDDataset');
  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;
  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;
    Datasets.ConfigSection := 'ENVIARLOTE';
    if Trim(MappingXsdFileName) <> '' then
      Datasets.MappingFileName := MappingXsdFileName
    else
      RaiseException('Mapping em branco');
    Datasets.CreateXSDDataset;

    if _PadraoTecnoNFSe then
    begin
      if EnvioSincrono then
        DSCIDADE_LOTE := 'GerarNfseEnvio'
      else
        DSCIDADE_LOTE := 'EnviarLoteRpsEnvio';

      // Belo Horizonte: para padrão TecnoNFSe configurar com ConfigSection diferente
      _PastaTecnoNFSe := Params.Values['DiretorioEsquemas'] + 'TecnoNFSe\';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        SetarCampoValorTamanhoObrigatorio('NumeroRps', CampoTecno('NumeroRps'), 15);
        SetarCampoValorTamanhoObrigatorio('SerieRps', CampoTecno('SerieRps'), 5);
        _ValorCampo := CampoTecno('TipoRps');
        if AnsiMatchText(_ValorCampo, ['1', '2', '3']) then
          SetarCampoObrigatorioValorTamanho('TipoRps', 'TipoRps', _ValorCampo, 1)
        else
          RaiseException('Para essa cidade o campo TipoRps deve ser informado da seguinte forma: 1 - RPS; 2 - Nota Fiscal Conjugada (Mista); 3 – Cupom.');

        _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), XSDDATETIMEFORMAT);
        SetarCampoValorTamanhoObrigatorio('DataEmissao', _ValorCampo, 23);

         //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional')
          else
            ExceptionValorInvalidoCampo('OptanteSimplesNacional. Valores aceitos: 1, 2.');
        end;
        
        //IncentivadorCultural
        _ValorCampo := CampoTecno('IncentivadorCultural');
        case _ValorCampo of
          '', '1', '2': SetarCampo('IncentivadorCultural')
          else
            ExceptionValorInvalidoCampo('IncentivadorCultural. Valores aceitos: 1, 2.');
        end;

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        case StrToIntDef(CampoTecno('TipoTributacao'), -1) of
          1, 3, 4 : SetarCampoValor('NaturezaOperacao', '3');
          2 : SetarCampoValor('NaturezaOperacao', '4');
          5 : ExceptionValorInvalidoCampo('TipoTributacao. Para ABRASF o TipoTributacao não pode ser "5 - Retida". Para isso pode se utilizar "6 - Tributavel dentro do municipio" ou "7 - Tributável fora do município');
          6 : SetarCampoValor('NaturezaOperacao', '1');
          7 : SetarCampoValor('NaturezaOperacao', '2');
        else
          ExceptionValorInvalidoCampo('TipoTributacao. Valores aceitos: 1, 2, 3, 4, 6, 7.');
        end;

        _ValorCampo := CampoTecno('TipoTributacao');
        // NaturezaTributacao: ignorar quando TipoTributacao for diferente de 6 ou 7
        //if _ValorCampo[1] in ['6', '7'] then
        if AnsiMatchText(_ValorCampo, ['6', '7']) then
        begin
          _ValorCampo := CampoTecno('NaturezaTributacao');
          case StrToIntDef(CampoTecno('NaturezaTributacao'), -1) of
            1: ;// IGNORADO
            2, 3: SetarCampoValor('NaturezaOperacao', '1');
            4: SetarCampoValor('NaturezaOperacao', '5');
            5: SetarCampoValor('NaturezaOperacao', '6');
          end;
        end;
        
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if (_ValorCampo <> '') and (_ValorCampo <> '0') then
        begin
          if (AnsiMatchText(_ValorCampo, ['1', '2', '3', '4', '5', '6'])) then
            SetarCampo('RegimeEspecialTributacao')
          else
            ExceptionValorInvalidoCampo('RegimeEspecialTributacao. Valores aceitos: 1, 2, 3, 4, 5 e 6.') 
        end;

        SetarCampoValorTamanho('NumeroRpsSubstituido', CampoTecno('NumeroRpsSubstituido'), 15);
        SetarCampoValorTamanho('SerieRpsSubstituido', CampoTecno('SerieRpsSubstituido'), 5);
        SetarCampoValorTamanho('TipoRpsSubstituido', CampoTecno('TipoRpsSubstituido'), 1);

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('OutrasRetencoes', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['', '1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0: // Vazio: deduzir do TipoTributacao
          begin
            if CampoTecno('TipoTributacao') = '5' then
              SetarCampoValor('IssRetido', '1')
            else
              SetarCampoValor('IssRetido', '2');
          end;
          1, 2, 3: SetarCampoValor('IssRetido', '1');
          4, 5, 6, 7: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        SetarCampoCurrency('ValorIss', False);

        if CampoTecno('ValorIssRetido') <> '' then
          SetarCampoCurrency('ValorIssRetido', False)
        else
        begin
          // Deduzível (se IssRetido=Sim, utiliza ValorIss)
          if AnsiMatchText(CampoTecno('IssRetido'), [ '1', 'sim', 'true']) then
            SetarCampoValor('ValorIssRetido', CampoCidade('ValorIss'));
        end;

        SetarCampoCurrency('BaseCalculo', False);
        SetarCampoCurrency('ValorLiquidoNfse', False);
        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        // Transformável: para Prodabel, 5% = 0.05
        if CampoTecno('AliquotaISS') = '' then
          SetarCampoValor('Aliquota', '')
        else
        begin
          if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
          begin
            if (CampoTecno('AliquotaISS') = '0') or (CampoTecno('AliquotaISS') = '0.00') or (CampoTecno('AliquotaISS') = '0,00') then
              SetarCampoValor('Aliquota', '0.00')
            else
            begin
              _Vlr := StrToFloat(StringReplace(CampoTecno('AliquotaISS'),',','.',[rfReplaceAll])) / 100;  // 5 --> 0,05
              _ValorCampo := FormataFloat( _Vlr, 5, 4);
              SetarCampoValor('Aliquota', _ValorCampo);
            end;
          end
          else
            ExceptionValorInvalidoCampo('AliquotaISS.');
        end;

        _ValorCampo := CampoTecno('CodigoItemListaServico');
        if SameText(Params.Values['Cidade'], 'BELOHORIZONTE') then
        begin
          _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(_ValorCampo, True)  // Belo Horizonte: tem que ter o ponto no ItemListaServico.
          SetarCampoValorTamanhoObrigatorio('ItemListaServico', _ValorCampo, 5);
        end
        else
          SetarCampoValorTamanhoObrigatorio('ItemListaServico', CampoTecno('CodigoItemListaServico'), 5);

        SetarCampoValorTamanho('CodigoCnae', CampoTecno('CodigoCnae'), 7);
        SetarCampoValorTamanho('CodigoTributacaoMunicipio', CampoTecno('CodigoTributacaoMunicipio'), 20);

        SetarCampoValorTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000);

        _ValorCampo := ConverterCodigoMunicipio(CampoTecno('CodigoCidadePrestacao'), True);
        SetarCampoValorTamanhoObrigatorio('CodigoMunicipio', _ValorCampo, 7);

        SetarCampoValorTamanhoObrigatorio('CnpjPrestador', RemoveMascara(CampoTecno('CpfCnpjPrestador')), 14);
        SetarCampoValorTamanho('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);// TODO: ver nº digitos

        if CampoTecno('CpfCnpjTomador') <> '' then
        begin
          _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
          case Length(_ValorCampo) of
            11: SetarCampoValor('CpfTomador', _ValorCampo);
            14: SetarCampoValor('CnpjTomador', _ValorCampo);
          else
            ExceptionValorInvalidoCampo('CpfCnpjTomador');
          end;
        end
        else
          SetarCampoValor('CnpjTomador', '');

        SetarCampoValorTamanho('RazaoSocialTomador', CampoTecno('RazaoSocialTomador'), 115);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);// TODO: ver nº digitos
        SetarCampoValorTamanho('EnderecoTomador', CampoTecno('EnderecoTomador'), 125);
        SetarCampoValorTamanho('NumeroTomador', CampoTecno('NumeroTomador'), 10);
        SetarCampoValorTamanho('ComplementoTomador', CampoTecno('ComplementoTomador'), 60);
        SetarCampoValorTamanho('BairroTomador', CampoTecno('BairroTomador'), 60);

        if ((CampoTecno('PaisTomador') <> '1058') and (CampoTecno('PaisTomador') <> '01058') and 
          (UpperCase(CampoTecno('PaisTomador')) <> 'BRASIL') and (CampoTecno('PaisTomador') <> '')) then
        begin
          SetarCampoValor('CodigoMunicipioTomador','9999999');
          SetarCampoValor('UfTomador', 'EX');
        end
        else
        begin
          _ValorCampo := ConverterCodigoMunicipio(CampoTecno('CodigoCidadeTomador'), True);
          SetarCampoValorTamanho('CodigoMunicipioTomador', _ValorCampo, 7);
        end;

        if CampoTecno('UfTomador') <> '' then
          SetarCampoValorTamanho('UfTomador', CampoTecno('UfTomador'), 2)
        else
        if CampoCidade('CodigoMunicipioTomador') <> '' then
        begin
          _ValorCampo := BuscarInfoCidade('CodIBGE', CampoCidade('CodigoMunicipioTomador'), 'UF');
          SetarCampoValor('UfTomador', _ValorCampo);
        end;

        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoValorTamanho('CepTomador', _ValorCampo, 8);

        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoValorTamanho('EmailTomador', CampoTecno('EmailTomador'), 80);

        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 115);
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          ExceptionValorInvalidoCampo('CpfCnpjIntermediario. Dever conter para Deve conter para CPF: 11 Caracteres; CNPJ: 14 Caracteres.');
        end;
        
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')), 15);// TODO: ver nº digitos

        SetarCampoValorTamanho('CodigoObra', CampoTecno('CodigoObra'), 15);
        SetarCampoValorTamanho('Art', CampoTecno('Art'), 15);

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipio(false);
      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampoValor('Id', CampoTecno('IdLote'))
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('Id', _ValorCampo);
      end;

      _ValorCampo := CampoTecno('Versao');
      if _ValorCampo = '' then
        _ValorCampo := '1.00';
      SetarCampoValor('Versao', _ValorCampo);

      SetarCampoValorTamanho('NumeroLote', CampoTecno('NumeroLote'), 15);
      
      if CampoTecno('CpfCnpjRemetente') <> '' then
        SetarCampoValor('Cnpj', RemoveMascara(CampoTecno('CpfCnpjRemetente')))
      else
        SetarCampoValor('Cnpj', RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString));

      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
      SetarCampoValorTamanho('InscricaoMunicipal', RemoveMascara(_ValorCampo), 15);

      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
    begin
      CriarDatasets;

      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;

  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.