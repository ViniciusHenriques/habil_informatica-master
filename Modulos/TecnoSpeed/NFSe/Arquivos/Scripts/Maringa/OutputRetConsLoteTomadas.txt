{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\Utils.txt}

Var
  _NFSE, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo : String;

  procedure GetPonteirosDataSets;
  begin
    _NFSE := Datasets.GetDataSetByName('CompNfse');
    _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
   if (_NFSE = nil) then
     RaiseException('DataSet ConsultarLoteRpsResposta não foi carregado corretamente.');
   if (_DSFalha = nil) then
     RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                          Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                          Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                              Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                              Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
  end;

  function GetStatus : String;
  begin
    if (Params.Values['SituacaoLote'] = '2') then
      Result := 'EMPROCESSAMENTO'
    else
    begin
      if (Params.Values['faultstring'] = '') and (GetMotivo = '') then
      begin
        Result := 'SUCESSO';
      end
      else
        Result := 'ERRO';
    end;
  end;

  function GetSituacaoNFSE : string;
  begin
    if (_NFSE.FieldByName('DataCancelamento').AsString = '') then
    begin
      if (_DSFalha.FieldByName('MotivoMensagem').AsString <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end
    else
    begin
      if (_NFSE.FieldByName('NfseSubstituidora').AsString <> '') then
        Result := 'SUBSTITUÍDA'
      else
        Result := 'CANCELADA';
    end;
  end;

  function GetChaveCancelamento : string;
  begin
    // No caso de GINFES é o mesmo numero da Nota conf. HelpExtra do componente
    Result := _NFSE.FieldByName('NumeroNFSe').AsString;
  end;

  function GetXmlNFSe(const aNumero : string) : string;
  var
    _Xml : String;
  begin
    _Xml := XmlSelect(Params.Values['XmlLote'], '//*[local-name()="CompNfse"]/*[local-name()="Nfse"]/*[local-name()="InfNfse"]/*[local-name()="Numero" and text()="'+aNumero+'"]/../../..');
    _Xml := StringReplace(_Xml, #13#10, '|', [rfReplaceAll]);
    Result := _Xml;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    //Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml', 
        'Tipo','ValorServicos','ValorDeducoes','ValorPis','ValorCofins','ValorInss',
        'ValorIr','ValorCsll','CodigoServico','AliquotaIss','ValorIss','IssRetido', 'RazaoSocialPrestador', 
        'EnderecoPrestador', 'NumeroPrestador', 'ComplementoPrestador', 'BairroPrestador', 
        'CodigoCidadePrestador', 'CepPrestador', 'CpfCnpjTomador', 'InscMunicipalTomador', 
        'RazaoSocialTomador', 'EnderecoTomador', 'NumeroTomador', 'ComplementoTomador', 
        'BairroTomador', 'CodigocidadeTomador', 'CepTomador', 'EmailTomador', 'TelefoneTomador', 
        'ItemListaServico', 'CodigoCNAE', 'CodTributacaoMunicipio', 'CodigoCidadePrestacao', 'DiscriminacaoServico']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function XmlVazio: String;
  var
    _Xml: String;
  begin
    Result := '';
    _Xml := UnEscapeXml(Params.Values['XmlLote']);
    if Pos('<ConsultarLoteRpsResposta', _Xml) > 0 then
    begin
      _Xml := GetValueTag('ConsultarLoteRpsResposta', _Xml);
      Result := _Xml;
    end;
  end;

  function TemValor(const aValor: String): String;
  begin
    Result := aValor;
    if trim(aValor) = '0' then
      Result := '0.00';
  end;

begin
  Output := '';

  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSets;

  Progress('Adicionando valores aos campos.');
  _NFSE.First;
  _Motivo := GetMotivo;

  if XmlVazio = '' then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;

      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo','XML vazio.');

      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  if (_Motivo <> '') and (_Motivo <> '- ()') then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;

      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',_Motivo);

      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    while Not _NFSE.Eof Do
    begin
      _ListFields := CreateFieldsResponse;

      if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
      Try
        AddValueListFields('Status', 'SUCESSO');
        AddValueListFields('Motivo', '');

        if _NFSE.FieldByName('cnpj').AsString <> '' then
          AddValueListFields('Cnpj', _NFSE.FieldByName('cnpj').AsString)
        else
          AddValueListFields('Cnpj', _NFSE.FieldByName('Cpf').AsString);

        AddValueListFields('InscMunicipal', _NFSE.FieldByName('InscMunicipal').AsString);
        AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
        AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
        AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
        AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
        AddValueListFields('DataAutorizacao', _NFSE.FieldByName('DataAutorizacao').AsString);
        AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
        AddValueListFields('Situacao', GetSituacaoNFSe);
        AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
        AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
        AddValueListFields('Xml', GetXmlNFSe(_NFSE.FieldByName('NumeroNFSe').AsString));
        AddValueListFields('ValorServicos', TemValor(_NFSE.FieldByName('ValorServicos').AsString));
        AddValueListFields('ValorDeducoes', TemValor(_NFSE.FieldByName('ValorDeducoes').AsString));
        AddValueListFields('ValorPis', TemValor(_NFSE.FieldByName('ValorPis').AsString));
        AddValueListFields('ValorCofins', TemValor(_NFSE.FieldByName('ValorCofins').AsString));
        AddValueListFields('ValorInss', TemValor(_NFSE.FieldByName('ValorInss').AsString));
        AddValueListFields('ValorIr', TemValor(_NFSE.FieldByName('ValorIr').AsString));
        AddValueListFields('ValorCsll', TemValor(_NFSE.FieldByName('ValorCsll').AsString));
        AddValueListFields('AliquotaIss', TemValor(_NFSE.FieldByName('Aliquota').AsString));
        AddValueListFields('ValorIss', TemValor(_NFSE.FieldByName('ValorIss').AsString));
        AddValueListFields('IssRetido', TemValor(_NFSE.FieldByName('IssRetido').AsString));
        AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);
        AddValueListFields('RazaoSocialPrestador', _NFSE.FieldByName('RazaoSocialPrestador').AsString);
        AddValueListFields('EnderecoPrestador', _NFSE.FieldByName('EnderecoPrestador').AsString);
        AddValueListFields('NumeroPrestador', _NFSE.FieldByName('NumeroPrestador').AsString);
        AddValueListFields('ComplementoPrestador', _NFSE.FieldByName('ComplementoPrestador').AsString);
        AddValueListFields('BairroPrestador', _NFSE.FieldByName('BairroPrestador').AsString);
        AddValueListFields('CodigoCidadePrestador', _NFSE.FieldByName('CodigoCidadePrestador').AsString);
        AddValueListFields('CepPrestador', _NFSE.FieldByName('CepPrestador').AsString);
        
        if _NFSE.FieldByName('CnpjTomador').AsString <> '' then
          AddValueListFields('CpfCnpjTomador', _NFSE.FieldByName('CnpjTomador').AsString)
        else
          AddValueListFields('CpfCnpjTomador', _NFSE.FieldByName('CpfTomador').AsString);
        
        AddValueListFields('InscMunicipalTomador', _NFSE.FieldByName('InscMunicipalTomador').AsString);
        AddValueListFields('RazaoSocialTomador', _NFSE.FieldByName('RazaoSocialTomador').AsString);
        AddValueListFields('EnderecoTomador', _NFSE.FieldByName('EnderecoTomador').AsString);
        AddValueListFields('NumeroTomador', _NFSE.FieldByName('NumeroTomador').AsString);
        AddValueListFields('ComplementoTomador', _NFSE.FieldByName('ComplementoTomador').AsString);
        AddValueListFields('BairroTomador', _NFSE.FieldByName('BairroTomador').AsString);
        AddValueListFields('CodigoCidadeTomador', _NFSE.FieldByName('CodigoCidadeTomador').AsString);
        AddValueListFields('CepTomador', _NFSE.FieldByName('CepTomador').AsString);
        AddValueListFields('EmailTomador', _NFSE.FieldByName('EmailTomador').AsString);
        AddValueListFields('TelefoneTomador', _NFSE.FieldByName('TelefoneTomador').AsString);
        AddValueListFields('ItemListaServico', _NFSE.FieldByName('ItemListaServico').AsString);
        AddValueListFields('CodigoCNAE', _NFSE.FieldByName('CodigoCNAE').AsString);
        AddValueListFields('CodTributacaoMunicipio', _NFSE.FieldByName('CodTributacaoMunicipio').AsString);
        AddValueListFields('CodigoCidadePrestacao', _NFSE.FieldByName('CodigoCidadePrestacao').AsString);
        AddValueListFields('DiscriminacaoServico', _NFSE.FieldByName('DiscriminacaoServico').AsString);        

        if (Params.Values['DelimitadorDaLinha'] = '') then
          Output := Output + FormatLineResult + #13#10
        else
          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      Finally
        _ListFields.Free;
      end;
      _NFSE.Next;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.
