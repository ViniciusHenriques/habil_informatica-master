{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
    Params : TStringList;
}

Var
  _Xml, _SituacaoLote, _XmlNota: string;
  _NumNota, i: Integer;

{$I Utils.txt}

begin
  if Pos('<faultstring',input) > 0 then
  begin
    Input := StringReplace(Input, #13#10, '', [rfReplaceAll]);
    Params.Add('faultstring='+input);
  end
  else
  begin
    Progress('Carregando configurações de XSDDataset.');
    Datasets.ConfigSection := 'RETORNO_CONSULTARLOTE';
    if Trim(MappingXsdFileName) <> '' then
      Datasets.MappingFileName := MappingXsdFileName;

    Progress('Criando XSDDataset.');
    Datasets.CreateXSDDataset;

    _Xml := Input;

    if Pos('&amp;', _Xml) = 0 then
      _Xml := StringReplace(_Xml, '&',  '&amp;',  [rfReplaceAll]);
      
    _Xml := StringReplace(_Xml, ';',  ' ',  [rfReplaceAll]);
    
    _Xml := StringReplace(_Xml, 'ConsultarNfseServicoTomadoResposta',  'ConsultarLoteRpsResposta',  [rfReplaceAll]);
    _Xml := StringReplace(_Xml, '<!--CRLF-->', '', [rfReplaceAll]);
    
    _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName, '//*[local-name()="ConsultarLoteRpsResposta"]');

    // Em alguns casos o XmlDeepNodeSearch pode indentar o XML, causando problemas no CSV
    _Xml := UnindentXml(_Xml);

    Params.Add('TipoXml=ConsultarNotasTomadas');
    Params.Add('XmlLote='+_Xml);
    Datasets.LoadFromXMLContent(_Xml);
    Progress('XML carregado com sucesso.');
  end;
end.
