{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _DsServicoAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _ValorDesc : string;
  _inicio: Integer;
  _linha: string;
  _NomeCampo: string;
  _PastaTecnoNFSe: string;
  _cdsPaises: TStringList;
  _Vlr: Double;
  DSCIDADE_NOTA: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSTECNO_SERVICO = 'Servico';
  DSCIDADE_SERV = 'DadosServico';
  DSCIDADE_NOTAUSADA = 'NotaUsada';
  DSCIDADE_ITEMUSADO = 'ItemUsado';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasetsItens.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipioDS.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := SameText(Params.Values['EnvioSincrono'], 'true');
  end;

  procedure ExceptionValorInvalidoCampo(const aNomeCampo: string);
  begin
    RaiseException('Valor inválido para o campo: ' + aNomeCampo);
  end;

  procedure SetarCampoValorServicoAgili(const aCampo, aValor: string);
  begin
    Campo(_DsServicoAtual, aCampo).AsString := aValor;
  end;
  
   procedure SetarCampoValorServicoAgiliTamanhoObrigatorio(const aCampo, aValor: string; const aTamanho : Integer; const aObrigario: Boolean);
  begin
    if (Length(aValor) <= aTamanho) and (aObrigario = true) and (Trim(aValor) <> '') then
      Campo(_DsServicoAtual, aCampo).AsString := aValor
    else if (Length(aValor) <= aTamanho) and (aObrigario = false) then
      Campo(_DsServicoAtual, aCampo).AsString := aValor
    else if (aObrigario = true) and (Trim(aValor) = '') then
     RaiseException('Para essa cidade o campo referente a tag ' + aCampo + ' é obrigatório e não deve ser maior que ' + IntToStr(aTamanho) + ' Caracteres.')
    else
     RaiseException('Para essa cidade o campo referente a tag ' + aCampo + ' não deve ser maior que ' + IntToStr(aTamanho) + ' Caracteres.')
  end;

  procedure SetarCampoCurrencyServicoAgili(const aCampo, aCampoTecno: string; const SetarSeZero: boolean);
  var _Valor: Currency;
  begin
    _Valor := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
    if (_Valor <> 0) or SetarSeZero then
      Campo(_DsServicoAtual, aCampo).AsString :=
        CurrencyToXsdCurrency(_Valor);
  end;

  procedure SetarCampoCurrencyValorServicoAgili(const aCampo, aValor: string; const SetarSeZero: boolean);
  var _Valor: Currency;
  begin
    _Valor := AnyCurrencyToCurrency(aValor);
    if (_Valor <> 0) or SetarSeZero then
      Campo(_DsServicoAtual, aCampo).AsString :=
        CurrencyToXsdCurrency(_Valor);
  end;
  
  procedure SetarCampoCurrencyValorServicoTamanhoAgili(const aCampo, aValor: string; const aTamanho : Integer; const SetarSeZero: boolean);
  var _Valor: Currency;
  begin
    _Valor := AnyCurrencyToCurrency(aValor);
    if (_Valor <> 0) or (SetarSeZero) and (Length(aValor) <= aTamanho) then
      Campo(_DsServicoAtual, aCampo).AsString :=
        CurrencyToXsdCurrency(_Valor);
  end;

  function FormataMonetario(const aValor: Currency): string;
  begin
    Result := CurrencyToXsdCurrency(aValor);
  end;  

begin
  Progress('Criando XSDDataset');
  if EnvioSincrono then
    DSCIDADE_NOTA := 'GerarNfseEnvio'
  else
    RaiseException('Geração de XML assíncrono não implementado para o padrão AGILI.');

  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;
  _cdsPaises := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasetsItens;

      _cdsPaises.LoadFromFile(_PastaTecnoNFSe + 'Paises.txt');

      // Editar dados carregados no Datasets, para fazer algumas transformações
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      if _DsTecnoAtual.RecordCount > 1 then
        RaiseException('Envio em Lote não suportado para o padrão Ágili.');

      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);
      _DsServicoAtual := Datasets.GetDataSetByName(DSCIDADE_SERV);

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));   
        SetarCpfCnpj('CpfPrestador', 'CnpjPrestador', 'CpfCnpjPrestador', _ValorCampo);
        SetarCampoValorTamanho('InscricaoMunicipalPrestador', CampoTecno('InscricaoMunicipalPrestador'), 100);

        SetarCampoValor('Versao', '1.00');
        SetarCampoValorTamanhoObrigatorio('NumeroRps', CampoTecno('NumeroRps'), 19);
        SetarCampoValorTamanhoObrigatorio('SerieRps', CampoTecno('SerieRps'), 5);
        
        if CampoTecno('TipoRps') <> '' then
          SetarCampoValor('TipoRps', '-2');

        SetarCampoValorTamanho('NfseSubstituida', CampoTecno('NumeroNfseSubstituida'), 19);

        _ValorCampo := CampoTecno('CpfCnpjTomador');
        if _ValorCampo <> '' then
        begin
          _ValorCampo := RemoveMascara(_ValorCampo);
          case length(_ValorCampo) of
            11 : SetarCampoValor('CpfTomador', _ValorCampo);
            14 : SetarCampoValor('CnpjTomador', _ValorCampo)
          else
            ExceptionValorInvalidoCampo('CpfCnpjTomador');
          end;
        end;

        SetarCampoValorTamanho('RazaoSocialTomador', CampoTecno('RazaoSocialTomador'), 120);
        SetarCampoValorTamanho('InscricaoEstadualTomador', RemoveMascara(CampoTecno('InscricaoEstadualTomador')), 20);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 100);
        SetarCampoValorTamanho('LogradouroTomador', CampoTecno('EnderecoTomador'), 120);
        SetarCampoValorTamanho('NumeroTomador', CampoTecno('NumeroTomador'), 10);
        SetarCampoValorTamanho('ComplementoTomador', CampoTecno('ComplementoTomador'), 300);
        SetarCampoValorTamanho('TipoLogradouroTomador', CampoTecno('TipoLogradouroTomador'), 120);
        SetarCampoValorTamanho('BairroTomador', CampoTecno('BairroTomador'), 120);
        SetarCampoValorTamanho('CodigoMunicipioTomador', CampoTecno('CodigoCidadeTomador'), 7);
        
        if CampoTecno('DescricaoCidadeTomador') = '' then
        begin
          _ValorCampo := BuscarInfoCidade('CodIBGE', CampoTecno('CodigoCidadeTomador'), 'NomeMunicIBGE');
          SetarCampoValor('DescricaoCidadeTomador', _ValorCampo);
        end
        else
          SetarCampoValorTamanho('DescricaoCidadeTomador', CampoTecno('DescricaoCidadeTomador'), 300);
          
        if (CampoCidade('CodigoMunicipioTomador') <> '') and (CampoCidade('CodigoMunicipioTomador') <> '9999999') then
        begin
          _ValorCampo := BuscarInfoCidade('CodIBGE', CampoCidade('CodigoMunicipioTomador'), 'UF');
          SetarCampoValor('UfTomador', _ValorCampo);
        end
        else
          SetarCampoValorTamanho('UfTomador', CampoTecno('UfTomador'), 2);
 
        if (CampoTecno('PaisTomador') = '') or (SameText(CampoTecno('PaisTomador'), 'Brasil')) then
          SetarCampoValor('PaisTomador', '1058')
        else
          SetarCampo('PaisTomador');

        if CampoCidade('PaisTomador') <> '' then
        begin
          _ValorCampo := _cdsPaises.Values[IntToStr(StrToInt(CampoCidade('PaisTomador')))];

          if _ValorCampo <> '' then
            SetarCampoValor('DescricaoPaisTomador', _ValorCampo);
        end;

        SetarCampoValorTamanho('CepTomador', CampoTecno('CepTomador'), 8);
        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoValorTamanho('EmailTomador', CampoTecno('EmailTomador'), 300);

        _ValorCampo := CampoTecno('PaisTomador');
        if (_ValorCampo = '1058') or (SameText(UpperCase(_ValorCampo), 'BRASIL')) or (_ValorCampo = '') then
          SetarCampoValor('LocalEndereco', '1')
        else
          SetarCampoValor('LocalEndereco', '2');

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario');
        end;

        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')), 100);
        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 120);

        SetarCampoValorTamanho('CodigoObra', CampoTecno('CodigoObra'), 20);
        SetarCampoValorTamanho('Art', CampoTecno('Art'), 20);

        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        case StrToIntDef(_ValorCampo, -1) of
          0, 1:
          begin
            SetarCampoValor('RegimeEspecialTributacao', '-1');
            SetarCampoValor('DescRegimeEspecialTributacao', 'Nenhum');
          end;
          2:
          begin
            SetarCampoValor('RegimeEspecialTributacao', '-2');
            SetarCampoValor('DescRegimeEspecialTributacao', 'Estimativa');
          end;
          4:
          begin
            SetarCampoValor('RegimeEspecialTributacao', '-4');
            SetarCampoValor('DescRegimeEspecialTributacao', 'Cooperativa');
          end;
          5:
          begin
            SetarCampoValor('RegimeEspecialTributacao', '-5');
            SetarCampoValor('DescRegimeEspecialTributacao', 'Microempresário individual (MEI)');
          end;
          6:
          begin
            SetarCampoValor('RegimeEspecialTributacao', '-6');
            SetarCampoValor('DescRegimeEspecialTributacao', 'Microempresário e empresa de pequeno porte (ME EPP)');
          end;
          7:
          begin
            SetarCampoValor('RegimeEspecialTributacao', '-7');
            SetarCampoValor('DescRegimeEspecialTributacao', 'Microempresário individual (MEI) optante pelo SIMEI');
          end;
         -1:;
        else
          ExceptionValorInvalidoCampo('RegimeEspecialTributacao. Valores aceitos: '', 0, 2, 4, 5, 6 e 7.');
        end;        

        if CampoTecno('OptanteSimplesNacional') <> '1' then
            SetarCampoValor('OptanteSimplesNacional', '0')
        else
          SetarCampoValor('OptanteSimplesNacional', '1');

        if CampoCidade('RegimeEspecialTributacao') = '-7' then
          SetarCampoValor('OptanteMEISimei', '1')
        else
          SetarCampoValor('OptanteMEISimei', '0');

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        case StrToIntDef(_ValorCampo, -1) of
          1:
          begin
            SetarCampoValor('ExigibilidadeIss', '-1');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Exigível');
          end;
          2:
          begin
            SetarCampoValor('ExigibilidadeIss', '-2');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Não incidência');
          end;
          3:
          begin
            SetarCampoValor('ExigibilidadeIss', '-3');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Isento');
          end;
          4:
          begin
            SetarCampoValor('ExigibilidadeIss', '-4');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Exportação');
          end;
          5:
          begin
            SetarCampoValor('ExigibilidadeIss', '-5');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Imune');
          end;
          6:
          begin
            SetarCampoValor('ExigibilidadeIss', '-6');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Exigibilidade suspensa por decisão judicial');
          end;
          7:
          begin
            SetarCampoValor('ExigibilidadeIss', '-7');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Exigibilidade suspensa por processo administrativo');
          end;
          8:
          begin
            SetarCampoValor('ExigibilidadeIss', '-8');
            SetarCampoValor('DescricaoExigibilidadeIss', 'Fixo');
          end
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7 e 8.');
        end;

        SetarCampoValorTamanho('MunicipioIncidencia', CampoTecno('MunicipioIncidencia'), 7);
        
        if CampoTecno('MunicipioIncidencia') <> '' then
        begin
          _ValorCampo := BuscarInfoCidade('CodIBGE', CampoTecno('MunicipioIncidencia'), 'NomeMunicIBGE');
          SetarCampoValor('DescricaoMunicipioIncidencia', _ValorCampo);
          _ValorCampo := BuscarInfoCidade('CodIBGE', CampoTecno('MunicipioIncidencia'), 'UF');
          SetarCampoValor('UfMunicipioIncidencia', _ValorCampo);
        end;

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'YYYY-MM-DD');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('DataEmissao',_ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('DataEmissao. É obrigatório e deve ser informado da seguinte forma: YYYY-MM-DD.');

        if CampoTecno('AliquotaISS') <> '' then
        begin
          _Vlr := StrToFloat(StringReplace(CampoTecno('AliquotaISS'), ',', '.',[]));
          _ValorCampo := FormataFloat( _Vlr, 5, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end;

        _ValorCampo := CampoTecno('IssRetido');
        case AnsiIndexText(_ValorCampo, ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2 : SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6 : SetarCampoValor('IssRetido', '0')
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        if CampoCidade('IssRetido') = '1' then
        begin
          SetarCampoValor('CodigoResponsavelIss', '-1');
          SetarCampoValor('DescricaoResponsavelIss', 'Tomador do serviço');
        end
        else if CampoCidade('IssRetido') = '0' then
        begin
          SetarCampoValor('CodigoResponsavelIss', '-3');
          SetarCampoValor('DescricaoResponsavelIss', 'Prestador do serviço');
        end;

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrencyValor('ValorLiquidoNfse', 'ValorLiquido', True);
        SetarCampoCurrencyValor('ValorDeducoes', 'ValorDescontos', True);
        SetarCampoCurrency('ValorIss', True);
        SetarCampoCurrency('ValorInss', True);
        SetarCampoCurrency('ValorIssRetido', True);
        SetarCampoCurrency('BaseCalculo', True);
        SetarCampoCurrency('ValorIr', True);
        SetarCampoCurrency('ValorCsll', True);
        SetarCampoCurrency('ValorPis', True);
        SetarCampoCurrency('ValorCofins', True);
        SetarCampoCurrency('OutrasRetencoes', True);

        SetarCampoValorTamanho('Observacao', CampoTecno('DescricaoRps'), 4000);
        SetarCampoValorTamanho('Complemento', CampoTecno('DescricaoRps'), 3000);

        _DsServicoAtual.Edit;
        
        if (CampoTecno('DescontoIncondicionado') <> '') and (CampoTecno('DescontoCondicionado') <> '') then
        begin
          _ValorCampo := FormataMonetario(StrToFloat(StringReplace(CampoTecno('DescontoIncondicionado'), ',', '.',[])) + StrToFloat(CampoTecno('DescontoCondicionado')));
          SetarCampoValorServicoAgili('ValorDesconto', _ValorCampo);
        end;

        if Trim(CampoTecno('QuantidadeServicos')) = '' then
          SetarCampoValorServicoAgiliTamanhoObrigatorio('Quantidade', '1', 13, true)
        else
          SetarCampoValorServicoAgiliTamanhoObrigatorio('Quantidade', CampoTecno('QuantidadeServicos'), 13, true);
          
        SetarCampoValorServicoAgiliTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000, true);

        VerificaSeEhNumero('CodigoCnae', CampoTecno('CodigoCnae'));
        if (Length(CampoTecno('CodigoCnae')) <> 7) and (CampoTecno('CodigoCnae') <> '') then
          RaiseException('O campo CodigoCnae deve conter exatamente 7 números.')
        else
          SetarCampoValorServicoAgiliTamanhoObrigatorio('CodigoCnae', CampoTecno('CodigoCnae'), 7, false);

        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(CampoTecno('CodigoItemListaServico'), true);
        SetarCampoObrigatorioValorTamanho('CodigoItemListaServico', CampoTecno('CodigoItemListaServico') , _ValorCampo, 5);
        SetarCampoValorServicoAgiliTamanhoObrigatorio('ItemListaServico', _ValorCampo, 5, false);
    
        SetarCampoCurrencyValorServicoTamanhoAgili('ValorServico', CampoTecno('ValorServicos'), 15, True);
        
        if (AnsiUpperCase(Params.Values['Cidade']) = 'SORRISOMT') then
        begin
          VerificaSeEhNumero('CodigoTributacaoMunicipio', CampoTecno('CodigoTributacaoMunicipio'));
          _ValorCampo := CampoTecno('CodigoTributacaoMunicipio');
          SetarCampoObrigatorioValorTamanho('CodigoItemListaServico', CampoTecno('CodigoTributacaoMunicipio'), _ValorCampo, 20);
        end;
    
        _DsServicoAtual.Post;
        _DsCidadeAtual.Post;

        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_SERVICO);
        _DsTecnoAtual.First;

        while not _DsTecnoAtual.Eof do
        begin
          _DsServicoAtual.Append;
          if (TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('DescontoIncondicionado').AsString <> '') and (TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('DescontoCondicionado').AsString <> '') then
          begin
            _ValorCampo := FormataMonetario(StrToFloat(StringReplace(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('DescontoIncondicionado').AsString, ',', '.',[])) + StrToFloat(StringReplace(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('DescontoCondicionado').AsString, ',', '.',[])));
            SetarCampoValorServicoAgili('ValorDesconto', _ValorCampo);
          end;
      
          if Trim(CampoTecno('QuantidadeServicos')) = '' then
            SetarCampoValorServicoAgiliTamanhoObrigatorio('Quantidade', '1', 13, true)
          else
            SetarCampoValorServicoAgiliTamanhoObrigatorio('Quantidade', CampoTecno('QuantidadeServicos'), 13, true);
          
          SetarCampoValorServicoAgiliTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000, true);

          VerificaSeEhNumero('CodigoCnae', CampoTecno('CodigoCnae'));
          if (Length(CampoTecno('CodigoCnae')) <> 7) and (CampoTecno('CodigoCnae') <> '') then
            RaiseException('O campo CodigoCnae deve conter exatamente 7 números.') 
          else
            SetarCampoValorServicoAgiliTamanhoObrigatorio('CodigoCnae', CampoTecno('CodigoCnae'), 7, false);

          _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(CampoTecno('CodigoItemListaServico'), True);
          SetarCampoValorServicoAgiliTamanhoObrigatorio('ItemListaServico', _ValorCampo, 5, True);
        
          SetarCampoValorServicoAgiliTamanhoObrigatorio('ValorServico', CampoTecno('ValorServicos'), 15, True);

          _DsServicoAtual.Post;
          _DsTecnoAtual.Next;
        end;

        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
        _DsTecnoAtual.Next;
      end;
      SetarCamposMunicipioDS([DSCIDADE_NOTA, DSCIDADE_NOTAUSADA, DSCIDADE_ITEMUSADO, DSCIDADE_SERV]);
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
