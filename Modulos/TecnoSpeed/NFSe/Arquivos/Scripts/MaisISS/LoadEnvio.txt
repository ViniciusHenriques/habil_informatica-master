{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo, _valorUF: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _DsServicoAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _QtdeRps: Integer;
  DSCIDADE_LOTE : string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSTECNO_SERVICO = 'Servico';
  DSCIDADE_NOTA = 'DeclaracaoPrestacaoServico';
  DSCIDADE_SERV = 'ItemServico';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\ConverterCodigoMunicipio.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasetsItens.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\SetarCamposMunicipioDS.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  function EnvioSincrono: Boolean;
  begin
    Result := SameText(Params.Values['EnvioSincrono'], 'true');
  end;

  procedure SetarCampoValorServicoMaisIss(const aCampo, aValor: string);
  begin
    Campo(_DsServicoAtual, aCampo).AsString := aValor;
  end;
  
    
  procedure SetarCampoValorServicoTamanhoObrigatorioMaisIss(const aCampo, aValor: string; Max: Integer);
  begin
    if (Length(aValor) <= Max) and (Trim(aValor) <> '') then
      Campo(_DsServicoAtual, aCampo).AsString := aValor
    else
      RaiseException('Para essa cidade o campo referente a tag "' + aCampo + '" é obrigatório e não deve ser Maior que ' + IntToStr(Max) + ' Caracteres');
  end; 
  
  procedure SetarCampoValorServicoTamanhoMaisIss(const aCampo, aValor: string; Max: Integer);
  begin
    if (Length(aValor) <= Max) then
      Campo(_DsServicoAtual, aCampo).AsString := aValor
    else
      RaiseException('Para essa cidade o campo referente a tag "' + aCampo + '" não deve ser Maior que ' + IntToStr(Max) + ' Caracteres');
  end; 

  procedure SetarCampoCurrencyServMaisIss(const aCampoMaisIss, aCampoTecno: string; const SetarSeZero: boolean);
  var _Valor: Currency;
  begin
    _Valor := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
    if (_Valor <> 0) or SetarSeZero then
      Campo(_DsServicoAtual, aCampoMaisIss).AsString :=
        CurrencyToXsdCurrency(_Valor);
  end;

  procedure SetarCampoValorDSServico(const aCampo, aValor: string);
  begin
    Campo(_DsServicoAtual, aCampo).AsString := aValor;
  end;

  procedure SetarCampoCurrencyValorDSServico(const aCampo, aValor: string; const SetarSeZero: boolean);
  var _Valor: Currency;
  begin
    _Valor := AnyCurrencyToCurrency(aValor);
    if (_Valor <> 0) or SetarSeZero then
      Campo(_DsServicoAtual, aCampo).AsString :=
        CurrencyToXsdCurrency(_Valor);
  end;

function FormatarCodigoItemListaServicoSeisDigitos(const aCodigo: string): string;
var
  _verificaInicioZero: integer;
  _digEsquerda, _digDireita: string;
begin
  Result := aCodigo;
  Result := StringReplace(Result, '.', '', []);
  case Length(Result) of
    4:
    begin
      _digEsquerda := LeftStr(Result, 2);
      _digDireita := RightStr(Result, 2);

      _verificaInicioZero := Pos('0',_digEsquerda);
      if (_verificaInicioZero = 1) then
        _digEsquerda := StringReplace(_digEsquerda, '0', '', [rfReplaceAll]);

     Result := _digEsquerda + _digDireita + '00';
    end;
    3:
    begin
      _digEsquerda := LeftStr(Result, 1);
      _digDireita := RightStr(Result, 2);

      _verificaInicioZero := Pos('0',_digEsquerda);
      if (_verificaInicioZero = 1) then
        _digEsquerda := StringReplace(_digEsquerda, '0', '', [rfReplaceAll]);

      Result := _digEsquerda + _digDireita + '00';
    end;
  end;
end;


function FormatarCodigoItemListaServicoZeroAEsquerda(const aCodigo: string): string;
begin
  Result := aCodigo;
  Result := StringReplace(Result, '.', '', []);
  case Length(Result) of
    4:
    begin
     Result := '00' + result;
    end;
    3:
    begin
      Result := '000' + result;
    end;
  end;
end;

begin
  Progress('Criando XSDDataset');

  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;
    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin

      if EnvioSincrono then
        DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio'
      else
        DSCIDADE_LOTE := 'EnviarLoteRpsEnvio';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasetsItens;

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);
      _DsServicoAtual := Datasets.GetDataSetByName(DSCIDADE_SERV);
      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;
      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        SetarCampoValorTamanhoObrigatorio('NumeroRps', CampoTecno('NumeroRps'), 15);
        SetarCampoValorTamanhoObrigatorio('SerieRps', CampoTecno('SerieRps'), 5);
        SetarCampoValorTamanhoObrigatorio('TipoRps', CampoTecno('TipoRps'), 1);
        
        _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'yyyy-mm-dd');
        SetarCampoValorTamanhoObrigatorio('DataEmissao', _ValorCampo, 23);

        _ValorCampo := CampoTecno('Competencia'); 
        if _ValorCampo <> '' then
        begin
          _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          SetarCampoValor('Competencia', _ValorCampo);
        end
        else
        begin
          _ValorCampo := FormatAnyDateTime(CampoTecno('DataEmissao'), 'yyyy-mm-dd');
          SetarCampoValor('Competencia', _ValorCampo);
        end;

        SetarCampoValorTamanhoObrigatorio('IncentivoFiscal', CampoTecno('IncentivoFiscal'), 1);

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            RaiseException('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        SetarCampoValorTamanho('NumeroRpsSubstituido', CampoTecno('NumeroRpsSubstituido'), 15);
        SetarCampoValorTamanho('SerieRpsSubstituido', CampoTecno('SerieRpsSubstituido'), 5);
        SetarCampoValorTamanho('TipoRpsSubstituido', CampoTecno('TipoRpsSubstituido'), 1);

        if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6', '7'])) then
          SetarCampo('RegimeEspecialTributacao');

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        
        // Para as cidades abaixo o campo ValorIss não deve ser enviado, sendo a prefeitura responsável por calcular este valor
        if not AnsiMatchText((Params.Values['Cidade']),['PONTAGROSSA','PALMEIRAPR','MANDAGUARIPR', 'PALOTINAPR']) then
          SetarCampoCurrency('ValorIss', False); 
        
        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          RaiseException('Valor inválido para o campo IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
          SetarCampo('ExigibilidadeIss')
        else
          RaiseException('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
        
        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}        
        _ValorCampo := CampoTecno('ResponsavelRetencao');
        case _ValorCampo of
          '', '1', '2': SetarCampoValor('ResponsavelRetencao', CampoTecno('ResponsavelRetencao'))
          else
            RaiseException('Valor inválido para o campo ResponsavelRetencao. Valores aceitos: 1 – Tomador, 2 – Intermediário');
        end;

        // Transformável: para Abrasf, 5% = 0.05
        _ValorCampo := Params.Values['Cidade'];
        if (CampoTecno('AliquotaISS') <> '') and (not SameText(_ValorCampo, 'MANDAGUARIPR')) then
        begin
          if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
          begin
            _Vlr := StrToFloat(StringReplace(CampoTecno('AliquotaISS'), ',', '.',[]));  // 5 --> 0,05
            _ValorCampo := FormataFloat(_Vlr, 5, 4);
            SetarCampoValor('Aliquota', _ValorCampo);
          end
          else
            RaiseException('Valor inválido para o campo AliquotaISS.');
        end
        else
          SetarCampoValor('Aliquota', '');

        if CampoTecno('DescricaoRPS') <> '' then
          SetarCampoValorTamanho('Discriminacao', CampoTecno('DescricaoRPS'), 2000)
        else
          SetarCampoValorTamanhoObrigatorio('Discriminacao', CampoTecno('DiscriminacaoServico'), 2000);

        SetarCampoValorTamanhoObrigatorio('CodigoMunicipio', CampoTecno('CodigoCidadePrestacao'), 7);
        
        if CampoTecno('ExigibilidadeIss') = '4' then
          SetarCampoValorTamanho('CodigoPais', CampoTecno('CodigoPais'), 4);

        SetarCampoValorTamanho('MunicipioIncidencia', CampoTecno('MunicipioIncidencia'), 7);

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        case Length(_ValorCampo) of
          11: SetarCampoValor('CpfPrestador', _ValorCampo);
          14: SetarCampoValor('CnpjPrestador', _ValorCampo);
        else
          RaiseException('Para essa cidade o campo CpfCnpjPrestador é obrigatório e deve conter 11 ou 14 caracteres.');
        end;
        
        SetarCampoValorTamanho('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')), 15);

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfTomador', _ValorCampo);
          14: SetarCampoValor('CnpjTomador', _ValorCampo);
        end;

        SetarCampoValorTamanho('NomeFantasiaPrestador', CampoTecno('NomeFantasiaPrestador'), 60);
        SetarCampoValorTamanho('RazaoSocialPrestador', CampoTecno('RazaoSocialPrestador'), 150);
        SetarCampoValorTamanho('EnderecoPrestador', CampoTecno('EnderecoPrestador'), 125);
        SetarCampoValorTamanho('NumeroPrestador', CampoTecno('NumeroPrestador'), 10);
        SetarCampoValorTamanho('BairroPrestador', CampoTecno('BairroPrestador'), 60);
        SetarCampoValorTamanho('CodigoMunicipioPrestador', CampoTecno('CodigoCidadePrestador'), 7);

        _ValorCampo := CampoTecno('CodigoCidadePrestador');
        if _ValorCampo <> '' then
        begin
          _valorUF := BuscarInfoCidade('CodIBGE', _ValorCampo, 'UF');
          SetarCampoValor('UfPrestador', _valorUF);
        end;

        SetarCampoValorTamanho('CepPrestador', CampoTecno('CepPrestador'), 8);
        SetarCampoValorTamanho('TelefonePrestador', CampoTecno('TelefonePrestador'), 20);

        SetarCampoValorTamanho('RazaoSocialTomador', CampoTecno('RazaoSocialTomador'), 150);
        SetarCampoValorTamanho('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')), 15);
        SetarCampoValorTamanho('EnderecoTomador', CampoTecno('EnderecoTomador'), 125);
        SetarCampoValorTamanho('NumeroTomador', CampoTecno('NumeroTomador'), 10);
        SetarCampoValorTamanho('ComplementoTomador', CampoTecno('ComplementoTomador'), 60);
        SetarCampoValorTamanho('BairroTomador', CampoTecno('BairroTomador'), 60);

        if CampoTecno('CodigoCidadeTomador') <> '' then
        begin
          _ValorCampo := ConverterCodigoMunicipio(CampoTecno('CodigoCidadeTomador'), True);
          SetarCampoValorTamanho('CodigoMunicipioTomador', _ValorCampo, 7);

          if CampoTecno('UfTomador') <> '' then
            SetarCampo('UfTomador')
          else
          begin
            _ValorCampo := BuscarInfoCidade('CodIBGE', CampoCidade('CodigoMunicipioTomador'), 'UF');
            SetarCampoValor('UfTomador', _ValorCampo);
          end;
        end;
        
        if CampoTecno('ExigibilidadeIss') = '4' then
          SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));

        SetarCampoValorTamanho('CepTomador', CampoTecno('CepTomador'), 8);
        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampoValorTamanho('EmailTomador', CampoTecno('EmailTomador'), 80);

        SetarCampoValorTamanho('RazaoSocialIntermediario', CampoTecno('RazaoSocialIntermediario'), 150);
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario');
        end;
        
        SetarCampoValorTamanho('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')), 15);

        SetarCampoValorTamanho('CodigoObra', CampoTecno('CodigoObra'), 15);
        SetarCampoValorTamanho('Art', CampoTecno('Art'), 15);

        _DsServicoAtual.Edit;
        
        if CampoTecno('QuantidadeServicos') <> '' then
          SetarCampoValorServicoMaisIss('Quantidade', CampoTecno('QuantidadeServicos'))
        else
          SetarCampoValorDSServico('Quantidade', '1');

        if CampoTecno('ValorUnitarioServico') <> '' then
          SetarCampoCurrencyServMaisIss('ValorUnitario', 'ValorUnitarioServico', False)
        else
          SetarCampoCurrencyServMaisIss('ValorUnitario', 'ValorServicos',False);
          
        SetarCampoValorServicoMaisIss('Descricao', Copy(CampoTecno('DiscriminacaoServico'), 0, 20));
        SetarCampoValorServicoTamanhoMaisIss('CodigoCnae', CampoTecno('CodigoCnae'), 7);
        
        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(CampoTecno('CodigoItemListaServico'), False);
        SetarCampoValorServicoTamanhoObrigatorioMaisIss('ItemListaServico', _ValorCampo, 6);

        if CampoTecno('Tributavel') <> '' then
          SetarCampoValorServicoMaisIss('Tributavel', CampoTecno('Tributavel'))
        else
          SetarCampoValorDSServico('Tributavel', '1');
          
        SetarCampoCurrencyServMaisIss('ValorLiquido', 'ValorLiquidoNfse', False);
        
        if CampoTecno('TipoDeducao') <> '' then
        begin
          SetarCampoValorServicoMaisIss('ValorTotalNotaFiscal', TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE).FieldByName('ValorTotalServicos').AsString);
          SetarCampoValorServicoTamanhoObrigatorioMaisIss('TipoDeducao', CampoTecno('TipoDeducao'), 1);
        end;

        _DsServicoAtual.Post;
        _DsCidadeAtual.Post;

        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_SERVICO);
        _DsTecnoAtual.First;

        while not _DsTecnoAtual.Eof do
        begin
          _DsServicoAtual.Append;

          if CampoTecno('QuantidadeServicos') <> '' then
            SetarCampoValorServicoMaisIss('Quantidade', CampoTecno('QuantidadeServicos'))
          else
            SetarCampoValorDSServico('Quantidade', '1');
            
          if CampoTecno('ValorUnitarioServico') <> '' then
            SetarCampoCurrencyServMaisIss('ValorUnitario', 'ValorUnitarioServico', False)
          else
            SetarCampoCurrencyValorDSServico('ValorUnitario', TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('ValorServicos').AsString, False);
            
          SetarCampoValorServicoMaisIss('Descricao', Copy(CampoTecno('DiscriminacaoServico'), 0, 20));
          SetarCampoValorServicoTamanhoMaisIss('CodigoCnae', CampoTecno('CodigoCnae'), 7);

          _ValorCampo := Params.Values['Cidade'];
          if SameText(_ValorCampo, 'MANDAGUARIPR') then
          begin
            _ValorCampo := FormatarCodigoItemListaServicoSeisDigitos(CampoTecno('CodigoItemListaServico'));
            SetarCampoValorServicoTamanhoObrigatorioMaisIss('ItemListaServico', _ValorCampo, 6);
          end
          else if SameText(_ValorCampo, 'IPIRANGAPR') then
          begin
            _ValorCampo := FormatarCodigoItemListaServicoZeroAEsquerda(CampoTecno('CodigoItemListaServico'));
            SetarCampoValorServicoTamanhoObrigatorioMaisIss('ItemListaServico', _ValorCampo, 6);
          end
          else
          begin
            _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(CampoTecno('CodigoItemListaServico'), False);
            SetarCampoValorServicoTamanhoObrigatorioMaisIss('ItemListaServico', _ValorCampo, 6);
          end;

          if CampoTecno('Tributavel') <> '' then
            SetarCampoValorServicoMaisIss('Tributavel', CampoTecno('Tributavel'))
          else
            SetarCampoValorDSServico('Tributavel', '1');
            
          SetarCampoValorServicoMaisIss('ValorLiquido', CampoTecno('ValorLiquidoServico'));
          
          if CampoTecno('TipoDeducao') <> '' then
          begin
            SetarCampoValorServicoMaisIss('ValorTotalNotaFiscal', TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE).FieldByName('ValorTotalServicos').AsString);
            SetarCampoValorServicoTamanhoObrigatorioMaisIss('TipoDeducao', CampoTecno('TipoDeducao'), 1);
          end;

          _DsServicoAtual.Post;
          _DsTecnoAtual.Next;
        end;
        _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipioDS([DSCIDADE_NOTA, DSCIDADE_SERV]);
      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      SetarCampoValorTamanhoObrigatorio('NumeroLote', CampoTecno('NumeroLote'), 15);
      
      if CampoTecno('CpfCnpjRemetente') <> '' then
        SetarCampoValorTamanho('Cnpj', RemoveMascara(CampoTecno('CpfCnpjRemetente')), 14)
      else
        SetarCampoValor('Cnpj', RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString));

      _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalRemetente'));
      if _ValorCampo = '' then
        _ValorCampo := RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString);

      SetarCampoValorTamanho('InscricaoMunicipal', _ValorCampo, 15);

      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.
