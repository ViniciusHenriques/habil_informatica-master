{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo : string;
  _ValorCampoVal, _ValorCampoValtrib : string;
  _NomeCampo: string;
  _inicio, _QtdeRps: Integer;
  _linha: string;
  _PastaTecnoNFSe: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'GerarNfse';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\Comuns.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\FormataFloat.txt}

  procedure ExceptionValorInvalidoCampo(const aNomeCampo: string);
  begin
    RaiseException('Valor inválido para o campo: ' + aNomeCampo);
  end;

  procedure SetarCampoCurrencyFISCO(const aCampoTecno, aCampoFISCO: string);
  var
    _ValorCur: Currency;
    _ValorStr: string;
  begin
    if CampoTecno(aCampoTecno) <> '' then
    begin
      try
        _ValorCur := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
        _ValorStr:= StringReplace(CurrencyToXsdCurrency(_ValorCur), ',', '.', [rfReplaceAll]);
      except
        RaiseException('Não foi possível realizar a conversão do campo: ' + aCampoTecno);
      end;

      Campo(_DsCidadeAtual, aCampoFISCO).AsString := _ValorStr;
    end;
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Editar dados carregados no Datasets, para fazer algumas transformações
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      if _QtdeRps > 1 then
        RaiseException('Envio síncrono não suporta envio em Lote, envie somente 1 RPS.');

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        VerificaSeEhNumero('CodigoCidadePrestador', CampoTecno('CodigoCidadePrestador'));
        SetarCampoValorTamanhoObrigatorio('CodigoMunicipio', CampoTecno('CodigoCidadePrestador'), 7);
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalPrestador'));
        VerificaSeEhNumero('InscricaoMunicipalPrestador', _ValorCampo);
        SetarCampoValorTamanhoObrigatorio('InscricaoMunicipal', FormatMaskText('AAA.AAA.AAA/AAA-AA;0;0', _ValorCampo), 20);

        SetarCampoValorTamanhoObrigatorio('NomeTomador', CampoTecno('RazaoSocialTomador'), 50);
        
        _ValorCampo := RemoveMascara(CampoTecno('InscricaoMunicipalTomador'));
        VerificaSeEhNumero('InscricaoMunicipalTomador', _ValorCampo);
        SetarCampoValorTamanhoObrigatorio('InscMunicipalTomador', FormatMaskText('AAA.AAA.AAA;0;0', _ValorCampo), 20);
        
        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'DD/MM/YYYY');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('DtEmissao', _ValorCampo);
        end
        else
          RaiseException('Para essa cidade o campo DataEmissao é obrigatorio e deve ser no seguinte formato: DD-MM-YYYY');

        _ValorCampo := CampoTecno('CpfCnpjTomador');
        if _ValorCampo <> '' then
        begin
          _ValorCampo := RemoveMascara(_ValorCampo);
          VerificaSeEhNumero('CpfCnpjTomador', _ValorCampo);
          case length(_ValorCampo) of
            11 : SetarCampoValor('CNPJCPFTomador', FormatMaskText('AAA.AAA.AAA-AA;0;0', _ValorCampo));
            14 : SetarCampoValor('CNPJCPFTomador', FormatMaskText('AAA.AAA.AAA/AAA-AA;0;0', _ValorCampo));
          else
            RaiseException('Valor inválido para o campo CNPJCPFTomador, deve conter 11 ou 14 números');
          end;
        end;

        SetarCampoValorTamanho('InscEstadualRGTomador', CampoTecno('InscricaoEstadualTomador'), 20);
        SetarCampoValorTamanhoObrigatorio('LogradouroTomador', CampoTecno('EnderecoTomador'), 100);        
        SetarCampoValorTamanhoObrigatorio('BairroTomador', CampoTecno('BairroTomador'), 50);        
        SetarCampoValorTamanhoObrigatorio('MunicipioTomador', CampoTecno('DescricaoCidadeTomador'), 50);
        SetarCampoValorTamanhoObrigatorio('UFTomador', CampoTecno('UFTomador'), 2);
        
        _ValorCampo := RemoveMascara(CampoTecno('CepTomador'));
        VerificaSeEhNumero('CepTomador', _ValorCampo);
        SetarCampoValorTamanhoObrigatorio('CEPTomador', _ValorCampo, 10);
        
        _ValorCampo := RemoveMascara(CampoTecno('TelefoneTomador'));
        VerificaSeEhNumero('TelefoneTomador', _ValorCampo);
        SetarCampoValorTamanhoObrigatorio('FoneTomador', CampoTecno('TelefoneTomador'), 20);

        _ValorCampo := CampoTecno('IssRetido');
        case AnsiIndexText(_ValorCampo, ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: _ValorCampo := '1';
          3, 4, 5, 6: _ValorCampo := '2';
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;
        
        if CampoTecno('TipoTributacao') = '6' then
        begin
          if _ValorCampo = '2' then
            SetarCampoValor('LocalPrestacao', '1')
          else if _ValorCampo = '1' then
            SetarCampoValor('LocalPrestacao', '2');
        end
        else if CampoTecno('TipoTributacao') = '7' then
        begin
          if _ValorCampo = '2' then
            SetarCampoValor('LocalPrestacao', '3')
          else if _ValorCampo = '1' then
            SetarCampoValor('LocalPrestacao', '4')
          else if _ValorCampo = '' then
            SetarCampoValor('LocalPrestacao', '5')
        end;

        SetarCampoValor('FormaPgto', '1');
        
        SetarCampoCurrencyFISCO('ValorIr', 'IRRF');
        SetarCampoCurrencyFISCO('ValorPis', 'PIS');
        SetarCampoCurrencyFISCO('ValorCofins', 'COFINS');
        SetarCampoCurrencyFISCO('ValorCsll', 'CSLL');
        SetarCampoCurrencyFISCO('ValorInss', 'INSS');        
        
        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);  // Fisco: com ponto no ItemListaServico
        VerificaSeEhNumero('CodigoItemListaServico', StringReplace(_ValorCampo, '.', '', [rfReplaceAll]));
        SetarCampoObrigatorioValorTamanho('CodigoServico', 'CodigoItemListaServico', _ValorCampo, 5);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.',[]);
          FormataFloat(StrToFloat(_ValorCampo), 6, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('AliquotaISS');
        
        SetarCampoValorTamanhoObrigatorio('DescricaoServico', CampoTecno('DiscriminacaoServico'), 500);
        
        if CampoTecno('OutrasInformacoes') <> '' then
          SetarCampoValorTamanhoObrigatorio('Observacao', CampoTecno('OutrasInformacoes'), 500)
        else
          SetarCampoValorTamanho('Observacao', CampoTecno('DiscriminacaoServico'), 500);

        if CampoTecno('MunicipioIncidencia') <> '' then
        begin   
          if not SameText(Params.Values['Cidade'], 'IRECEBA') then
          begin
            VerificaSeEhNumero('MunicipioIncidencia', CampoTecno('MunicipioIncidencia'));
            SetarCampoValor('MunicipioIncidencia', BuscarInfoCidade('CodIBGE', CampoTecno('MunicipioIncidencia'), 'NomeMunicSIAFI'));        
          end;
          SetarCampoValor('UFIncidencia', BuscarInfoCidade('CodIBGE', CampoTecno('MunicipioIncidencia'), 'UF'));
        end;
        
        SetarCampoValor('PaisIncidencia', 'Brasil');
        
        _ValorCampo := RemoveMascara(CampoTecno('NumeroRps'));
        VerificaSeEhNumero('NumeroRps', _ValorCampo);
        SetarCampoValorTamanhoObrigatorio('RPS', CampoTecno('NumeroRps'), 20);
        
        _ValorCampo := FormatarCodigoItemListaServico(CampoTecno('CodigoItemListaServico'), True);
        if (_ValorCampo = '07.02') or (_ValorCampo = '07.05') then
        begin
          SetarCampoValorTamanhoObrigatorio('CodigoObra', CampoTecno('CodigoObra'), 20);
          SetarCampoValorTamanhoObrigatorio('Art', CampoTecno('Art'), 20);
        end;
        
        ValidaCampoVazio('ValorServicos');
        SetarCampoCurrencyFISCO('ValorServicos', 'ValorTotal');
        ValidaCampoVazio('ValorDeducoes');
        SetarCampoCurrencyFISCO('ValorDeducoes', 'ValorDeducao');
        
        _ValorCampo := StringReplace(CampoTecno('EmailTomador'),' ','',[rfReplaceAll]);
        SetarCampoValorTamanho('EmailTomador', _ValorCampo, 100);

        _ValorCampo := CampoTecno('DataVencimento');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'DD/MM/YYYY');
          except
            ExceptionValorInvalidoCampo('DataVencimento');
          end;
          SetarCampoValor('DtVencimento', _ValorCampo);
        end;
        

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      SetarCamposMunicipio(false);
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.    
